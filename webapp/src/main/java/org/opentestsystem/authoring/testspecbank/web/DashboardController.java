/*******************************************************************************

 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.web;

import org.opentestsystem.authoring.testspecbank.service.DashboardService;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.UserService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

/**
 * Small controller that gets the user to the dashboard
 */
@Controller
public class DashboardController extends AbstractRestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DashboardController.class);

    @Autowired
    private DashboardService dashboardService;

    private static final String MIN_PATH = "includes/min";
    private static final String EXPLODED_PATH = "includes/exploded";

    @Autowired
    private UserService userService;

    /**
     * Redirects user to the index page
     * 
     * @param model
     */
    @RequestMapping(value = { "/", "/tsb" })
    public String defaultPage(final Model model) {
        final SbacUser user = this.userService.getCurrentUser();
        model.addAttribute("user", user.getFullName());
        model.addAttribute("baseUrl", this.dashboardService.getBaseUrl());
        model.addAttribute("tsbComponentName", this.dashboardService.getTsbComponentName());
        model.addAttribute("includePath", Boolean.parseBoolean(this.dashboardService.getMinJs()) ? MIN_PATH : EXPLODED_PATH);
        return "/tsb";
    }

    /**
     * Redirects user to the index page
     * 
     * @param model
     */
    @RequestMapping(value = "/thankyou")
    public String logoutSuccess(final Model model) {
        model.addAttribute("baseUrl", this.dashboardService.getBaseUrl());
        return "/logout";
    }

    /**
     * Redirects user to the index page
     * 
     * @param model
     */
    @RequestMapping(value = "/jasmine")
    public String jasmineTestRunner(final Model model) {
        model.addAttribute("baseUrl", this.dashboardService.getBaseUrl());
        model.addAttribute("tsbComponentName", this.dashboardService.getTsbComponentName());
        LOGGER.info("to the dashboard! " + this.dashboardService.getBaseUrl());
        return "/jasmine_runner";
    }
}
