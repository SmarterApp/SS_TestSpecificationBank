/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.web;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testspecbank.service.DashboardService;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;

public class DashboardControllerTest {

    private DashboardController dashboardController;

    @Before
    public void setup() {
        this.dashboardController = new DashboardController();

        final DashboardService dashboardService = Mockito.mock(DashboardService.class);
        when(dashboardService.getBaseUrl()).thenReturn("/testBaseUrl");
        when(dashboardService.getTsbComponentName()).thenReturn("test spec bank");
        when(dashboardService.getMinJs()).thenReturn("true");
        ReflectionTestUtils.setField(this.dashboardController, "dashboardService", dashboardService);

        final UserService userService = Mockito.mock(UserService.class);
        when(userService.getCurrentUser()).thenReturn(new SbacUser(null, null));
        ReflectionTestUtils.setField(this.dashboardController, "userService", userService);
    }

    @Test
    public void findPlaceholders() throws InterruptedException {
        final Model mockModel = new ExtendedModelMap();

        assertThat(this.dashboardController.defaultPage(mockModel), is(equalTo("/tsb")));
        assertThat((String) mockModel.asMap().get("baseUrl"), is(equalTo("/testBaseUrl")));
        assertThat((String) mockModel.asMap().get("tsbComponentName"), is(equalTo("test spec bank")));
    }
}
