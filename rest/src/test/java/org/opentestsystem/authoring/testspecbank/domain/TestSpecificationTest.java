/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.domain;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;

import org.joda.time.DateTime;
import org.junit.Test;

public class TestSpecificationTest {

    private static final DateTime PUBLISH_DATE = new DateTime();

    @Test
    public void equalsTest() {
        final TestSpecification expected = createDummyTestSpecification();
        final TestSpecification actual = createDummyTestSpecification();
        final TestSpecification unexpected = buildTestSpecification("4321", "name", "version1", "tenantId", PUBLISH_DATE, Purpose.ADMINISTRATION);
        final TestSpecification unexpected2 = buildTestSpecification("1234", "rename", "version1", "tenantId", PUBLISH_DATE, Purpose.ADMINISTRATION);
        final TestSpecification unexpected3 = buildTestSpecification("1234", "name", "subversion1", "tenantId", PUBLISH_DATE, Purpose.ADMINISTRATION);
        final TestSpecification unexpected4 = buildTestSpecification("1234", "name", "version1", "retenantId", PUBLISH_DATE, Purpose.ADMINISTRATION);
        final TestSpecification unexpected5 = buildTestSpecification("1234", "name", "version1", "tenantId", PUBLISH_DATE.minusHours(1), Purpose.ADMINISTRATION);
        final TestSpecification unexpected6 = buildTestSpecification("1234", "name", "version1", "retenantId", PUBLISH_DATE, Purpose.REGISTRATION);

        assertThat(actual, is(equalTo(expected)));
        assertThat(actual, is(not(equalTo(unexpected))));
        assertThat(actual, is(not(equalTo(unexpected2))));
        assertThat(actual, is(not(equalTo(unexpected3))));
        assertThat(actual, is(not(equalTo(unexpected4))));
        assertThat(actual, is(not(equalTo(unexpected5))));
        assertThat(actual, is(not(equalTo(unexpected6))));
    }

    @Test
    public void toStringTest() {
        final TestSpecification expected = createDummyTestSpecification();
        final TestSpecification actual = createDummyTestSpecification();

        assertThat(actual.toString(), is(equalTo(expected.toString())));
    }

    @Test
    public void hashcodeTest() {
        final TestSpecification expected = createDummyTestSpecification();
        final TestSpecification actual = createDummyTestSpecification();

        assertThat(actual.hashCode(), is(equalTo(expected.hashCode())));
    }

    private TestSpecification createDummyTestSpecification() {
        return buildTestSpecification("1234", "name", "version1", "tenantId", PUBLISH_DATE, Purpose.ADMINISTRATION);
    }

    private TestSpecification buildTestSpecification(final String id, final String name, final String version, final String tenantId, final DateTime lastUpdatedDate, final Purpose purpose) {
        final TestSpecification testSpecification = new TestSpecification();
        testSpecification.setId(id);
        testSpecification.setName(name);
        testSpecification.setTenantId(tenantId);
        testSpecification.setLastUpdatedDate(lastUpdatedDate);
        testSpecification.setVersion(version);
        testSpecification.setPurpose(purpose);
        return testSpecification;
    }
}
