/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testspecbank.client.tib.TestItemBankClientInterface;
import org.opentestsystem.authoring.testspecbank.domain.ExportPackageStatus;
import org.opentestsystem.authoring.testspecbank.domain.Purpose;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecification;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecificationXmlBuilder;
import org.opentestsystem.authoring.testspecbank.domain.TibExportDetails;
import org.opentestsystem.authoring.testspecbank.domain.tib.ExportItemClientObj;
import org.opentestsystem.authoring.testspecbank.domain.tib.ExportSetClientObj;
import org.opentestsystem.authoring.testspecbank.domain.tib.ExportStatus;
import org.opentestsystem.authoring.testspecbank.persistence.TestSpecificationRepository;
import org.opentestsystem.authoring.testspecbank.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testspecbank.service.FileManagerService;
import org.opentestsystem.authoring.testspecbank.service.FileTransferService;
import org.opentestsystem.authoring.testspecbank.service.TestSpecificationService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.util.ReflectionTestUtils;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

public class TestSpecificationServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private TestSpecificationService testSpecificationService;

    @Autowired
    private TestSpecificationRepository testSpecificationRepository;

    @Autowired
    private FileTransferService testItemBankFileTransferService; // mock

    @Autowired
    private FileTransferService testPackagerFileTransferService; // mock

    @Autowired
    private FileManagerService fileManagerService; // mock

    @Autowired
    private TestItemBankClientInterface testItemBankClient; // mock

    private static final String TEST_ADMINISTRATION_SPEC = "" +
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<testspecification publishdate=\"2014-03-18T17:34:44.699Z\" purpose=\"ADMINISTRATION\" publisher=\"524af61ae4b0b02763aa0fe0\">" +
            "    <administration>" +
            "        <itempool>" +
            "            <testitem itemtype=\"type1\">" +
            "                <identifier label=\"Reading is fun\" name=\"apipitem_114738\" uniqueid=\"5328834bce6b1789210fad86\" version=\"2.1\"/>" +
            "            </testitem>" +
            "            <testitem itemtype=\"type2\">" +
            "                <identifier label=\"Difficult Reading\" name=\"apipitem_114739\" uniqueid=\"5328834bce6b1789210fad87\" version=\"5.2\"/>" +
            "            </testitem>" +
            "        </itempool>" +
            "    </administration>" +
            "    <identifier name=\"CC-aaa-8-AAA-I-1\" uniqueid=\"531736b5d55ecab7f5a610a9\" version=\"1.1\"/>" +
            "</testspecification>";

    private static final String ITEMLESS_TEST_ADMINISTRATION_SPEC = "" +
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
            "<testspecification publishdate=\"2014-03-18T17:34:44.699Z\" purpose=\"ADMINISTRATION\" publisher=\"524af61ae4b0b02763aa0fe0\">" +
            "    <administration>" +
            "        <itempool>" +
            "        </itempool>" +
            "    </administration>" +
            "    <identifier name=\"CC-aaa-8-AAA-I-1\" uniqueid=\"531736b5d55ecab7f5a610a9\" version=\"1.1\"/>" +
            "</testspecification>";

    @Before
    public void setup() {
        Mockito.reset(this.testItemBankFileTransferService, this.testPackagerFileTransferService, this.testItemBankClient, this.fileManagerService);
    }

    @Test
    public void getTestSpecification() {
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(buildValidTestSpecification(false));

        final TestSpecification foundTestSpecification = this.testSpecificationService.getTestSpecification(savedTestSpecification.getId(), false);
        assertThat(foundTestSpecification, is(notNullValue()));
        assertThat(foundTestSpecification.getCategory(), is(equalTo(savedTestSpecification.getCategory())));
        assertThat(foundTestSpecification.getGrade(), is(equalTo(savedTestSpecification.getGrade())));
        assertThat(foundTestSpecification.getLabel(), is(equalTo(savedTestSpecification.getLabel())));
        assertThat(foundTestSpecification.getName(), is(equalTo(savedTestSpecification.getName())));
        assertThat(foundTestSpecification.getPurpose(), is(equalTo(savedTestSpecification.getPurpose())));
        assertThat(foundTestSpecification.getSpecificationXmlGridFsId(), is(equalTo(savedTestSpecification.getSpecificationXmlGridFsId())));
        assertThat(foundTestSpecification.getSubjectAbbreviation(), is(equalTo(savedTestSpecification.getSubjectAbbreviation())));
        assertThat(foundTestSpecification.getTenantId(), is(equalTo(savedTestSpecification.getTenantId())));
        assertThat(foundTestSpecification.getType(), is(equalTo(savedTestSpecification.getType())));
        assertThat(foundTestSpecification.getVersion(), is(equalTo(savedTestSpecification.getVersion())));
        assertThat(foundTestSpecification.getSpecificationXml(), is(notNullValue()));
    }

    @Test
    public void getTestSpecificationWithoutXml() {
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(buildValidTestSpecification(false));

        final TestSpecification foundTestSpecification = this.testSpecificationService.getTestSpecification(savedTestSpecification.getId(), true);
        assertThat(foundTestSpecification, is(notNullValue()));
        assertThat(foundTestSpecification.getName(), is(equalTo(savedTestSpecification.getName())));
        assertThat(foundTestSpecification.getSpecificationXml(), is(nullValue()));
    }

    @Test
    public void saveNewTestSpecificationTest() {
        assertThat(ReflectionTestUtils.getField(this.testSpecificationService, "testSpecDtdUrl"), is(notNullValue()));
        final TestSpecification testSpecificationToSave = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecificationToSave.setLastUpdatedDate(null);
        testSpecificationToSave.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.REGISTRATION)));
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(testSpecificationToSave);
        assertThat(savedTestSpecification, is(notNullValue()));
        final Map<String, String[]> params = ImmutableMap.of("id", new String[] { savedTestSpecification.getId() }, "tenantSet", new String[] { savedTestSpecification.getTenantId() });
        final SearchResponse<TestSpecification> searchResponse = this.testSpecificationService.searchTestSpecifications(params, false);
        assertThat(searchResponse.getReturnCount(), is(1));
        assertThat(searchResponse.getSearchResults().size(), is(1));
    }

    @Test(expected = LocalizedException.class)
    public void saveInvalidTestSpecificationXmlThrowsErrorTest() {
        assertThat(ReflectionTestUtils.getField(this.testSpecificationService, "testSpecDtdUrl"), is(notNullValue()));
        final TestSpecification testSpecificationToSave = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecificationToSave.setSpecificationXml("junk".getBytes());
        this.testSpecificationService.saveTestSpecification(testSpecificationToSave);
    }

    @Test(expected = IllegalArgumentException.class)
    public void saveTestSpecificationWithPublishDatePassedFailsTest() {
        final TestSpecification testSpecificationToSave = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecificationToSave.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.ADMINISTRATION)));
        this.testSpecificationService.saveTestSpecification(testSpecificationToSave);
    }

    @Test
    public void saveDuplicateTestSpecificationTest() {
        final TestSpecification testSpecificationToSave = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecificationToSave.setLastUpdatedDate(null);
        testSpecificationToSave.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.SCORING)));
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(testSpecificationToSave);
        assertThat(savedTestSpecification, is(notNullValue()));

        final TestSpecification anotherTestSpecification = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        anotherTestSpecification.setName(testSpecificationToSave.getName());
        anotherTestSpecification.setPurpose(testSpecificationToSave.getPurpose());
        anotherTestSpecification.setVersion(testSpecificationToSave.getVersion());
        anotherTestSpecification.setLastUpdatedDate(null);
        anotherTestSpecification.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.REPORTING)));

        try {
            this.testSpecificationService.saveTestSpecification(anotherTestSpecification);
            fail("Exception should occur when saving duplicate test specifications");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is(equalTo("testspec.already.exists")));
        }
    }

    @Test
    public void updateTenantSetTest() {
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(buildTestSpecificationWithExportPackage(ExportPackageStatus.COMPLETE, false));
        assertThat(ReflectionTestUtils.getField(this.testSpecificationService, "testSpecDtdUrl"), is(notNullValue()));
        final Set<String> tenantSet = savedTestSpecification.getTenantSet();
        tenantSet.add("new-tenant-id");
        final TestSpecification updatedTestSpecification = this.testSpecificationService.updateTenantSet(savedTestSpecification.getId(), tenantSet);
        assertThat(updatedTestSpecification, is(notNullValue()));
        final Map<String, String[]> params = ImmutableMap.of("id", new String[] { savedTestSpecification.getId() }, "tenantSet", new String[] { savedTestSpecification.getTenantId() });
        final SearchResponse<TestSpecification> searchResponse = this.testSpecificationService.searchTestSpecifications(params, false);
        assertThat(searchResponse.getReturnCount(), is(1));
        assertThat(searchResponse.getSearchResults().size(), is(1));

        final Map<String, String[]> params2 = ImmutableMap.of("id", new String[] { savedTestSpecification.getId() }, "tenantSet", new String[] { "new-tenant-id" });
        final SearchResponse<TestSpecification> searchResponse2 = this.testSpecificationService.searchTestSpecifications(params2, false);
        assertThat(searchResponse2.getReturnCount(), is(1));
        assertThat(searchResponse2.getSearchResults().size(), is(1));
    }

    @Test
    public void requestExportPackage() {
        TestSpecification savedSpec = buildValidTestSpecification(false);
        savedSpec.setTenantId("tenant-id");
        savedSpec.setName("name");
        savedSpec.setVersion("version");
        savedSpec.setPurpose(Purpose.REGISTRATION);
        savedSpec = this.testSpecificationService.saveTestSpecification(savedSpec);

        // validate result
        final TestSpecification result = this.testSpecificationService.requestExportPackage(savedSpec.getId());
        assertThat(result.getExportPackage(), is(notNullValue()));

        // validate spec updated
        final TestSpecification foundSpec = this.testSpecificationRepository.findOne(savedSpec.getId());
        assertThat(foundSpec.getExportPackage().getStatus(), is(ExportPackageStatus.SUBMITTED));
        assertThat(foundSpec.getExportPackage().getTimeRequested(), is(notNullValue()));
    }

    @Test
    public void requestExportPackageForRetiredSpec() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.PENDING_SFTP, false);
        testSpecification.setRetired(true);
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(testSpecification);

        try {
            this.testSpecificationService.requestExportPackage(savedTestSpecification.getId());
            fail("exception should be thrown");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("testspec.retired.export"));
        }
    }

    @Test
    public void searchTestSpecifications() {
        // setup test data
        TestSpecification testSpecification1 = buildTestSpecificationWithExportPackage(ExportPackageStatus.COMPLETE, false);
        testSpecification1 = this.testSpecificationService.saveTestSpecification(testSpecification1);
        assertThat(testSpecification1, is(not(nullValue())));

        TestSpecification testSpecification2 = buildTestSpecificationWithExportPackage(ExportPackageStatus.PENDING_SFTP, false);
        testSpecification2.setName("name2");
        testSpecification2 = this.testSpecificationService.saveTestSpecification(testSpecification2);
        assertThat(testSpecification2, is(not(nullValue())));

        // search
        Map<String, String[]> params = ImmutableMap.of("tenantSet", new String[] { testSpecification1.getTenantId() }, "exportPackageStatus", new String[] { "COMPLETE" });
        SearchResponse<TestSpecification> searchResponse = this.testSpecificationService.searchTestSpecifications(params, false);
        assertThat(searchResponse.getReturnCount(), is(1));
        assertThat(searchResponse.getSearchResults().size(), is(1));

        params = ImmutableMap.of("tenantSet", new String[] { testSpecification2.getTenantId() }, "name", new String[] { testSpecification2.getName() });
        searchResponse = this.testSpecificationService.searchTestSpecifications(params, false);
        assertThat(searchResponse.getReturnCount(), is(1));
        assertThat(searchResponse.getSearchResults().size(), is(1));
    }

    @Test
    public void retireTestSpecification() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.COMPLETE, false);
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(testSpecification);

        final TestSpecification retiredTestSpecification = this.testSpecificationService.retireTestSpecification(savedTestSpecification.getId(), false);
        assertThat(retiredTestSpecification.isRetired(), is(true));
    }

    @Test
    public void restoreTestSpecification() {
        final TestSpecification testSpecification = buildValidTestSpecification(false);
        testSpecification.getExportPackage().setStatus(ExportPackageStatus.COMPLETE);
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(testSpecification);

        final TestSpecification retiredTestSpecification = this.testSpecificationService.retireTestSpecification(savedTestSpecification.getId(), false);
        assertThat(retiredTestSpecification.isRetired(), is(true));

        final TestSpecification unretiredTestSpecification = this.testSpecificationService.retireTestSpecification(savedTestSpecification.getId(), true);
        assertThat(unretiredTestSpecification.isRetired(), is(false));
    }

    @Test
    public void getExportPackagesByStatusIn() {
        TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.SUBMITTED, false);
        testSpecification = this.testSpecificationService.saveTestSpecification(testSpecification);
        assertThat(testSpecification, is(not(nullValue())));

        TestSpecification anotherTestSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.COMPLETE, false);
        anotherTestSpecification.setName("name2");
        anotherTestSpecification = this.testSpecificationService.saveTestSpecification(anotherTestSpecification);
        assertThat(anotherTestSpecification, is(not(nullValue())));

        final List<TestSpecification> foundTestSpecifications = this.testSpecificationService.getTestSpecificationsByExportPackageStatusIn(ImmutableSet.of(ExportPackageStatus.SUBMITTED), true);
        assertThat(foundTestSpecifications.size(), is(1));
        assertThat(foundTestSpecifications.get(0).getId(), is(testSpecification.getId()));

        final List<TestSpecification> foundTestSpecifications2 = this.testSpecificationService.getTestSpecificationsByExportPackageStatusIn(ImmutableSet.of(ExportPackageStatus.COMPLETE), true);
        assertThat(foundTestSpecifications2.size(), is(1));
        assertThat(foundTestSpecifications2.get(0).getId(), is(anotherTestSpecification.getId()));

        final List<TestSpecification> foundTestSpecifications3 = this.testSpecificationService.getTestSpecificationsByExportPackageStatusIn(ImmutableSet.of(ExportPackageStatus.SUBMITTED,
                ExportPackageStatus.COMPLETE), true);
        assertThat(foundTestSpecifications3.size(), is(2));

        final List<TestSpecification> foundTestSpecifications4 = this.testSpecificationService.getTestSpecificationsByExportPackageStatusIn(ImmutableSet.of(ExportPackageStatus.FAILED), true);
        assertThat(foundTestSpecifications4.size(), is(0));

        final List<TestSpecification> foundTestSpecifications5 = this.testSpecificationService.getTestSpecificationsByExportPackageStatusIn(new HashSet<ExportPackageStatus>(), true);
        assertThat(foundTestSpecifications5.size(), is(0));
    }

    @Test
    public void loadAdministrationTestSpecification() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.SUBMITTED, true);
        testSpecification.setSpecificationXml(TEST_ADMINISTRATION_SPEC.getBytes());
        testSpecification.setPurpose(Purpose.ADMINISTRATION);

        final ExportSetClientObj mockExportSet = PODAM_FACTORY.manufacturePojo(ExportSetClientObj.class);
        mockExportSet.setId("export-set-id");
        mockExportSet.setStatus(ExportStatus.WAITING_TO_EXPORT);
        when(this.testItemBankClient.requestExport((ExportSetClientObj) Mockito.anyObject())).thenReturn(mockExportSet);

        this.testSpecificationService.loadTestSpecification(testSpecification);
        final TestSpecification transformedTestSpecification = testSpecificationService.getTestSpecification(testSpecification.getId(), true);
        assertThat(transformedTestSpecification.getExportPackage().getStatus(), is(ExportPackageStatus.PENDING_ITEM_EXPORT));

        verify(this.testItemBankClient, times(1)).requestExport((ExportSetClientObj) Mockito.anyObject());
    }

    @Test
    public void loadAdministrationTestSpecificationWithNoItems() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.SUBMITTED, true);
        testSpecification.setSpecificationXml(ITEMLESS_TEST_ADMINISTRATION_SPEC.getBytes());
        testSpecification.setPurpose(Purpose.ADMINISTRATION);

        this.testSpecificationService.loadTestSpecification(testSpecification);
        final TestSpecification transformedTestSpecification = testSpecificationService.getTestSpecification(testSpecification.getId(), true);
        assertThat(transformedTestSpecification.getExportPackage().getStatus(), is(ExportPackageStatus.PENDING_PACKAGE_CREATION));
    }

    @Test
    public void loadRegistrationTestSpecification() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.SUBMITTED, true);

        this.testSpecificationService.loadTestSpecification(testSpecification);
        final TestSpecification transformedTestSpecification = testSpecificationService.getTestSpecification(testSpecification.getId(), true);
        assertThat(transformedTestSpecification.getExportPackage().getStatus(), is(ExportPackageStatus.PENDING_PACKAGE_CREATION));
    }

    @Test
    public void checkTibExportPackageStatusCompleted() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.PENDING_ITEM_EXPORT, true);
        testSpecification.getExportPackage().setTibExportDetails(new TibExportDetails());
        testSpecification.getExportPackage().getTibExportDetails().setId("export-set-id");

        final ExportSetClientObj mockExportSet = PODAM_FACTORY.manufacturePojo(ExportSetClientObj.class);
        mockExportSet.setItems(ImmutableList.of(buildTestItem(1), buildTestItem(2)));
        mockExportSet.setStatus(ExportStatus.EXPORT_COMPLETE);

        when(this.testItemBankClient.getExportSet(Mockito.eq("export-set-id"))).thenReturn(mockExportSet);

        this.testSpecificationService.checkTibExportStatus(testSpecification);
        final TestSpecification transformedTestSpecification = testSpecificationService.getTestSpecification(testSpecification.getId(), true);
        assertThat(transformedTestSpecification.getExportPackage().getStatus(), is(ExportPackageStatus.PENDING_PACKAGE_CREATION));
        verify(this.testItemBankClient, times(1)).getExportSet("export-set-id");
    }

    @Test
    public void checkTibExportPackageStatusStillPending() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.PENDING_ITEM_EXPORT, true);
        testSpecification.getExportPackage().setTibExportDetails(new TibExportDetails());
        testSpecification.getExportPackage().getTibExportDetails().setId("export-set-id");

        final ExportSetClientObj mockExportSet = PODAM_FACTORY.manufacturePojo(ExportSetClientObj.class);
        mockExportSet.setItems(ImmutableList.of(buildTestItem(1), buildTestItem(2)));
        mockExportSet.setStatus(ExportStatus.WAITING_TO_EXPORT);

        when(this.testItemBankClient.getExportSet(Mockito.eq("export-set-id"))).thenReturn(mockExportSet);

        this.testSpecificationService.checkTibExportStatus(testSpecification);
        final TestSpecification transformedTestSpecification = testSpecificationService.getTestSpecification(testSpecification.getId(), true);
        assertThat(transformedTestSpecification.getExportPackage().getStatus(), is(ExportPackageStatus.PENDING_ITEM_EXPORT));
        verify(this.testItemBankClient, times(1)).getExportSet("export-set-id");
    }

    @Test
    public void buildExportPackageZip() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.PENDING_PACKAGE_CREATION, true);
        testSpecification.getExportPackage().setTibExportDetails(new TibExportDetails());
        testSpecification.getExportPackage().getTibExportDetails().setId("export-set-id");

        // mock TIB call
        final ExportSetClientObj mockExportSet = PODAM_FACTORY.manufacturePojo(ExportSetClientObj.class);
        mockExportSet.setId("export-set-id");
        mockExportSet.setStatus(ExportStatus.WAITING_TO_EXPORT);
        mockExportSet.setItems(ImmutableList.of(buildTestItem(1), buildTestItem(2)));
        when(this.testItemBankClient.getExportSet("export-set-id")).thenReturn(mockExportSet);

        // mock download call
        final File expectedDownloadDirectory = new File("test");
        when(this.fileManagerService.initializeCleanDirectory("test_package_specName_COMPLETE_v1.0")).thenReturn(expectedDownloadDirectory);

        // verify results
        this.testSpecificationService.buildExportPackageZip(testSpecification);
        final TestSpecification updatedTestSpecification = testSpecificationService.getTestSpecification(testSpecification.getId(), true);
        assertThat(updatedTestSpecification.getExportPackage(), is(notNullValue()));
        assertThat(updatedTestSpecification.getExportPackage().getStatus(), is(ExportPackageStatus.PENDING_SFTP));
        assertThat(updatedTestSpecification.getExportPackage().getZipFileNames(), is(nullValue()));
        assertThat(updatedTestSpecification.getExportPackage().getExportCompleted(), is(nullValue()));

        final String expectedFileName = mockExportSet.getZipFileName();
        verify(this.testItemBankFileTransferService, Mockito.times(1)).downloadFile(Mockito.eq(expectedFileName), Mockito.eq("test_package_specName_COMPLETE_v1.0"));
        verify(this.fileManagerService, Mockito.times(1)).writeFile(Mockito.eq("test_package_specName_COMPLETE_v1.0/test_specification.xml"), (byte[]) Mockito.anyObject());
        verify(this.fileManagerService, Mockito.times(1)).buildZipFromDirectory(Mockito.eq(expectedDownloadDirectory), Mockito.eq("test_package_specName_COMPLETE_v1.0.zip"));
    }

    @Test
    public void updatedTestSpecificationDuringExport() {
        final TestSpecification testSpecification = this.testSpecificationService.saveTestSpecification(buildTestSpecificationWithExportPackage(ExportPackageStatus.SUBMITTED, false));
        testSpecification.setLabel("New Label");

        try {
            this.testSpecificationService.updateTenantSet(testSpecification.getId(), testSpecification.getTenantSet());
            fail("exception should be thrown");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("testspec.submitted.update"));
        }
    }

    @Test
    public void retireTestSpecificationDuringExport() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.SUBMITTED, false);
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(testSpecification);

        try {
            testSpecificationService.retireTestSpecification(savedTestSpecification.getId(), false);
            fail("exception should be thrown");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("testspec.export.retire"));
        }
    }

    @Test
    public void transferExportPackage() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.PENDING_SFTP, true);

        // verify results
        this.testSpecificationService.transferExportPackage(testSpecification);
        final TestSpecification transferredTestSpecification = testSpecificationService.getTestSpecification(testSpecification.getId(), true);

        assertThat(transferredTestSpecification, is(notNullValue()));
        assertThat(transferredTestSpecification.getExportPackage().getStatus(), is(ExportPackageStatus.COMPLETE));
        assertThat(transferredTestSpecification.getExportPackage().getZipFileNames().size(), is(2));
        assertThat(transferredTestSpecification.getExportPackage().getZipFileNames().contains("tenant_tenant-1/test_package_specName_COMPLETE_v1.0.zip"), is(true));
        assertThat(transferredTestSpecification.getExportPackage().getZipFileNames().contains("tenant_tenant-2/test_package_specName_COMPLETE_v1.0.zip"), is(true));
        assertThat(transferredTestSpecification.getExportPackage().getExportCompleted(), is(notNullValue()));
        verify(this.testPackagerFileTransferService, Mockito.times(1)).writeFile("test_package_specName_COMPLETE_v1.0.zip", "tenant_tenant-1", "test_package_specName_COMPLETE_v1.0.zip");
        verify(this.testPackagerFileTransferService, Mockito.times(1)).writeFile("test_package_specName_COMPLETE_v1.0.zip", "tenant_tenant-2", "test_package_specName_COMPLETE_v1.0.zip");
    }

    @Test
    public void retryExportPackage() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.PENDING_SFTP, false);
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(testSpecification);

        final TestSpecification retriedTestSpecification = this.testSpecificationService.retryExportPackage(savedTestSpecification.getId());
        assertThat(retriedTestSpecification.getExportPackage().getStatus(), is(ExportPackageStatus.SUBMITTED));
    }

    @Test
    public void retryNotFoundExportPackage() {
        try {
            this.testSpecificationService.retryExportPackage("invalid-id");
            fail("should throw exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("exportPackage.not.exists"));
        }
    }

    @Test
    public void retryExportPackageForRetiredSpec() {
        final TestSpecification testSpecification = buildTestSpecificationWithExportPackage(ExportPackageStatus.PENDING_SFTP, false);
        testSpecification.setRetired(true);
        final TestSpecification savedTestSpecification = this.testSpecificationService.saveTestSpecification(testSpecification);

        try {
            this.testSpecificationService.retryExportPackage(savedTestSpecification.getId());
            fail("exception should be thrown");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("testspec.retired.export"));
        }
    }

    private static TestSpecification buildTestSpecificationWithExportPackage(final ExportPackageStatus status, final boolean decompressXml) {
        final TestSpecification testSpecification = buildValidTestSpecification(decompressXml);
        testSpecification.setName("specName");
        testSpecification.setVersion("1.0");
        testSpecification.setPurpose(Purpose.COMPLETE);
        testSpecification.setTenantSet(ImmutableSet.of("tenant-1", "tenant-2"));
        testSpecification.getExportPackage().setStatus(status);
        testSpecification.getExportPackage().setExportCompleted(null);
        testSpecification.getExportPackage().setZipFileNames(null);
        testSpecification.setRetired(false);
        return testSpecification;
    }

    private static ExportItemClientObj buildTestItem(final int itemId) {
        final ExportItemClientObj item = PODAM_FACTORY.manufacturePojo(ExportItemClientObj.class);
        item.setIdentifier("item-id-" + itemId);
        item.setVersion("1." + itemId);
        return item;
    }

    private static TestSpecification buildValidTestSpecification(final boolean decompressXml) {
        final TestSpecification spec = PODAM_FACTORY.manufacturePojo(TestSpecification.class);

        final byte[] compressedXml = TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.REGISTRATION));
        spec.setSpecificationXml(decompressXml ? decompress(compressedXml) : compressedXml);
        spec.setLastUpdatedDate(null);
        spec.setRetired(false);

        return spec;
    }

    private static final byte[] decompress(final byte[] testSpecificationXml) {
        final Inflater inflater = new Inflater();
        inflater.setInput(testSpecificationXml);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream(testSpecificationXml.length);

        byte[] outBytes = null;

        try {
            final byte[] buffer = new byte[4096];
            while (!inflater.finished()) {
                final int count = inflater.inflate(buffer);
                baos.write(buffer, 0, count);
            }
            baos.close();
            outBytes = baos.toByteArray();

        } catch (final IOException | DataFormatException e) {
            throw new LocalizedException("testspec.xml.compress.error", e);
        }

        return outBytes;
    }
}
