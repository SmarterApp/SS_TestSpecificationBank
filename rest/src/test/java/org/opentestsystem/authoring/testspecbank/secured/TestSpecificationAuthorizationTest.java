/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.secured;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testspecbank.domain.Permissions;
import org.opentestsystem.authoring.testspecbank.domain.Purpose;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecification;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecificationXmlBuilder;
import org.opentestsystem.authoring.testspecbank.service.TestSpecificationService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;

public class TestSpecificationAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String TEST_SPEC_URL = "/testSpecification";

    @Autowired
    private TestSpecificationService testSpecificationService;

    private List<Permissions> permissions;
    private TestSpecification savedTestSpecification;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        permissions = Lists.newArrayList();
    }

    void setupTestSpecification(final int uniqueId) {
        this.savedTestSpecification = saveSampleTestSpecification(uniqueId, Purpose.COMPLETE);
    }

    /**************************************** Test Specification ****************************************/
    @Test
    public void testSpecRead() {
        setupTestSpecification(1);
        permissions.add(Permissions.TEST_SPEC_READ);
        setUserWithRoles(permissions, savedTestSpecification.getTenantId());
        final TestSpecification fetchedTestSpecification = callGETRestService(TEST_SPEC_URL + "/" + this.savedTestSpecification.getId(), TestSpecification.class);
        assertThat(fetchedTestSpecification, is(notNullValue()));
        assertThat(fetchedTestSpecification.getId(), is(notNullValue()));
    }

    @Test
    public void testSpecReadFail() {
        setupTestSpecification(3);
        permissions.add(Permissions.TEST_SPEC_ADMIN);
        setUserWithRoles(permissions, savedTestSpecification.getTenantId());
        final TestSpecification fetchedTestSpecification = callGETRestService(TEST_SPEC_URL + "/" + this.savedTestSpecification.getId(), TestSpecification.class, status().isUnauthorized());
        assertThat(fetchedTestSpecification, is(notNullValue()));
        assertThat(fetchedTestSpecification.getId(), is(nullValue()));
    }

    /***********************************************************************************************/

    private TestSpecification saveSampleTestSpecification(final int uniqueId, final Purpose purpose) {
        final TestSpecification testSpecification = new TestSpecification();
        testSpecification.setName("test-spec-name" + uniqueId);
        testSpecification.setVersion("1.0." + uniqueId);
        testSpecification.setTenantId("tenant-id" + uniqueId);
        testSpecification.setPurpose(purpose);
        testSpecification.setGrade(new String[] { "2", "3", "4" });
        testSpecification.setSubjectAbbreviation("ABB" + uniqueId);
        testSpecification.setSubjectName("Abbreviated subject - " + uniqueId);
        testSpecification.setLabel("label" + uniqueId);
        testSpecification.setType("FORMATIVE");
        testSpecification.setCategory("category" + uniqueId);
        testSpecification.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(purpose)));
        return this.testSpecificationService.saveTestSpecification(testSpecification);
    }

    private Map<String, Object> buildTestSpecificationMap(final int uniqueId, final Purpose purpose) {
        return buildParamObject(saveSampleTestSpecification(uniqueId, purpose));
    }

}
