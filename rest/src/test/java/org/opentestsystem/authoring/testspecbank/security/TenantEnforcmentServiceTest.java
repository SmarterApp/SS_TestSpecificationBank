/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.security;


import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecification;
import org.opentestsystem.authoring.testspecbank.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testspectbank.security.TenantEnforcementService;
import org.opentestsystem.authoring.testspectbank.security.TenantEnforcementServiceImpl;
import org.opentestsystem.shared.security.domain.SbacRole;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.AccessDeniedException;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Multimap;

public class TenantEnforcmentServiceTest {

    @Autowired
    private TenantEnforcementService tenantEnforcementService = new TenantEnforcementServiceImpl();

    private UserService userService;
    
    private static String TENANT_ID_1 = "1";
    private static String TENANT_ID_2 = "2";
    private static String WRITE_PERMISSION = "Write Permission";
    private static String READ_PERMISSION = "READ Permission";
    private SbacUser sbacUser;
    
    
    @Before
    public void setupMockUsers(){
        Multimap<String, SbacRole> sbacRolesMap = ArrayListMultimap.create();
        userService = Mockito.mock(UserService.class);

        sbacUser = Mockito.spy(new SbacUser(sbacRolesMap,null));
        Mockito.when(userService.getCurrentUser()).thenReturn(sbacUser);
        tenantEnforcementService.setUserService(userService);
        
    }

    
    @Test
    public void testSpecification() {
      Mockito.when(sbacUser.hasPermissionForTenant(WRITE_PERMISSION, TENANT_ID_1)).thenReturn(true);
      Mockito.when(sbacUser.hasPermissionForTenant(WRITE_PERMISSION, TENANT_ID_2)).thenReturn(false);  
      
      TestSpecification testSpec = new TestSpecification();
      testSpec.setTenantId(TENANT_ID_1);
      
      try{
          tenantEnforcementService.enforceTenancyForObject(testSpec, new String[] {WRITE_PERMISSION});
      } catch(AccessDeniedException e){
          fail("Access should not be denied");
      }
    }

    @Test(expected = AccessDeniedException.class)
    public void testSpecificationNoPermission() {
      Mockito.when(sbacUser.hasPermissionForTenant(WRITE_PERMISSION, TENANT_ID_1)).thenReturn(true);
      Mockito.when(sbacUser.hasPermissionForTenant(WRITE_PERMISSION, TENANT_ID_2)).thenReturn(false);  
      
      TestSpecification testSpec = new TestSpecification();
      testSpec.setTenantId(TENANT_ID_2);
      
      tenantEnforcementService.enforceTenancyForObject(testSpec, new String[] {WRITE_PERMISSION});

    }
    

    @Test(expected = AccessDeniedException.class)
    public void testNobodyHasAccess() {
      Mockito.when(sbacUser.hasPermissionForTenant(READ_PERMISSION, TENANT_ID_1)).thenReturn(true);
      Mockito.when(sbacUser.hasPermissionForTenant(READ_PERMISSION, TENANT_ID_2)).thenReturn(false);  
      
      TestSpecification testSpec = new TestSpecification();
      testSpec.setTenantId(TENANT_ID_2);
      testSpec.setTenantSet(ImmutableSet.of(""));
      
      tenantEnforcementService.verifyUserIsConfiguredToReadObjects(testSpec, READ_PERMISSION);
    }
    
    
    @Test
    public void testTenantOneReadable() {
      Mockito.when(sbacUser.hasPermissionForTenant(READ_PERMISSION, TENANT_ID_1)).thenReturn(true);
      Mockito.when(sbacUser.hasPermissionForTenant(READ_PERMISSION, TENANT_ID_2)).thenReturn(false);  
      
      TestSpecification testSpec = new TestSpecification();
      testSpec.setTenantId("3");
      testSpec.setTenantSet(ImmutableSet.of(TENANT_ID_1, TENANT_ID_2));
      
      try{
          tenantEnforcementService.verifyUserIsConfiguredToReadObjects(testSpec, READ_PERMISSION);
      } catch(AccessDeniedException e){
          fail("Access should not be denied");
      }
    }

    @Test(expected = AccessDeniedException.class)
    public void testTenantNoTenantReadable() {
      Mockito.when(sbacUser.hasPermissionForTenant(READ_PERMISSION, TENANT_ID_1)).thenReturn(false);
      Mockito.when(sbacUser.hasPermissionForTenant(READ_PERMISSION, TENANT_ID_2)).thenReturn(false);  
      
      TestSpecification testSpec = new TestSpecification();
      testSpec.setTenantId("3");
      testSpec.setTenantSet(ImmutableSet.of(TENANT_ID_1, TENANT_ID_2));
      tenantEnforcementService.verifyUserIsConfiguredToReadObjects(testSpec, READ_PERMISSION);
    }

}
