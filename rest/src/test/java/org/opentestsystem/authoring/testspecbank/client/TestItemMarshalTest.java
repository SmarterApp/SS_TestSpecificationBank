///*******************************************************************************
// * Educational Online Test Delivery System
// * Copyright (c) 2013 American Institutes for Research
// * 
// * Distributed under the AIR Open Source License, Version 1.0
// * See accompanying file AIR-License-1_0.txt or at
// * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
// ******************************************************************************/
//package org.opentestsystem.authoring.testspecbank.client;
//
//import static org.hamcrest.CoreMatchers.is;
//import static org.hamcrest.CoreMatchers.notNullValue;
//import static org.hamcrest.MatcherAssert.assertThat;
//import static org.junit.Assert.assertNotNull;
//
//import java.io.File;
//import java.io.IOException;
//
//import org.junit.Test;
//import org.junit.runner.RunWith;
//import org.opentestsystem.authoring.testspecbank.domain.tib.ExportSetClientObj;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.test.context.ContextConfiguration;
//import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
//
//import com.fasterxml.jackson.core.JsonParseException;
//import com.fasterxml.jackson.databind.JsonMappingException;
//import com.fasterxml.jackson.databind.ObjectMapper;
//import com.google.common.base.Charsets;
//import com.google.common.io.Files;
//
////need spring context to load inject file, so using lite-context.xml
//@RunWith(SpringJUnit4ClassRunner.class)
//@ContextConfiguration(locations = { "classpath:spring/lite-context.xml" })
//public class TestItemMarshalTest {
//    @Value("classpath:exportSet.json")
//    private File testFile;
//
//    @Autowired
//    protected ObjectMapper objectMapper;
//
//    @Test
//    public void testJsonParse() throws JsonParseException, JsonMappingException {
//        assertNotNull("no file found", testFile);
//
//        try {
//            final ExportSetClientObj respObj = objectMapper.readValue(Files.toString(testFile, Charsets.UTF_8), ExportSetClientObj.class);
//            assertThat(respObj, is(notNullValue()));
//            assertThat(respObj.getItems().size(), is(2));
//        } catch (final IOException e) {
//            e.printStackTrace();
//        }
//    }
//}
