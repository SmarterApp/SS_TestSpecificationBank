/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.rest;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Matchers.anyMap;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantChain;
import org.opentestsystem.shared.progman.client.domain.TenantSubscription;
import org.opentestsystem.shared.security.domain.SbacPermission;
import org.opentestsystem.shared.security.domain.SbacRole;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.domain.TenantContainer;
import org.opentestsystem.shared.security.service.TenancyService;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Multimap;

public class UserControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String COMPONENT_NAME = "TestSpecBank";

    static {
        System.setProperty("component.name", COMPONENT_NAME);
    }

    private Map<String, Object> response;

    private TenantContainer tenantContainer;

    @Autowired
    private UserService userService;

    @Autowired
    private TenancyService tenancyService;

    @Autowired
    private ProgManClient progManClient;

    @SuppressWarnings("unchecked")
    @Before
    public void testSetup() {
        this.response = ImmutableMap.of("id", (Object) "ajsdfkl", "assets", (Object) ImmutableList.of(Map.class, ImmutableMap.of("name", "logo", "property", "/img/dude.jpg")));

        final Tenant myTenant = PODAM_FACTORY.manufacturePojo(Tenant.class);
        final TenantSubscription tenantSubscription = PODAM_FACTORY.manufacturePojo(TenantSubscription.class);
        tenantSubscription.getComponent().setName(COMPONENT_NAME);
        tenantSubscription.setEffectiveDate(new DateTime().minusWeeks(1));
        tenantSubscription.setExpirationDate(null);
        tenantSubscription.setInGoodStanding(true);
        myTenant.setTenantSubscriptions(ImmutableList.of(tenantSubscription));
        this.tenantContainer = PODAM_FACTORY.manufacturePojo(TenantContainer.class);
        this.tenantContainer.addAllTenants(ImmutableList.of(myTenant));

        final SbacPermission permission = new SbacPermission();
        permission.setComponentName(COMPONENT_NAME);
        permission.setName("do Stuff");
        final Multimap<String, SbacPermission> permissions = ArrayListMultimap.create();
        final String roleName = "TestRole";
        permissions.put(roleName, permission);
        final SbacRole role = new SbacRole();
        role.setIsApplicableToTenant(true);
        role.setRoleName(roleName);
        role.setRoleEntityLevel(myTenant.getType().name());
        role.addEntityValue(myTenant.getType(), myTenant.getId(), myTenant.getName());
        final Multimap<String, SbacRole> roles = ArrayListMultimap.create();
        roles.put(role.getRoleName(), role);
        final SbacUser user = new SbacUser(roles, null);

        when(this.progManClient.getTenantChain(anyMap())).thenReturn(createTenantChainFromContainer(tenantContainer));
        when(this.userService.getCurrentUser()).thenReturn(user);
        when(this.tenancyService.getSkinnableAssets(role)).thenReturn(this.response);

        final TenantContainer tc = new TenantContainer();
        tc.addTenant(myTenant);
        when(this.userService.getUniqueTenantsForUser()).thenReturn(tc);
        final Map<String, Object> assets = new HashMap<String, Object>();
        assets.put("assets", Arrays.asList(new String[] { "1", "2" }));
        assets.put("other", Arrays.asList(new String[] { "1", "2" }));
        when(this.userService.getAssetsForTenant(anyString())).thenReturn(assets);

    }

    private TenantChain createTenantChainFromContainer(final TenantContainer inTenantContainer) {
        final TenantChain chain = new TenantChain();
        chain.setTenants(ImmutableSet.<Tenant> builder().addAll(inTenantContainer.getTenants()).build());
        return chain;
    }

    @SuppressWarnings("unchecked")
    @Test
    public void getUserAssets() {
        when(this.userService.getAssetsForTenant(anyString())).thenReturn(this.response);
        final Map<String, Object> userAssetGroup = callGETRestService("/user/assets?tenantId=" + this.tenantContainer.getTenants().iterator().next().getId(), Map.class);
        if (userAssetGroup != null) {
            final List<Object> assets = (List<Object>) userAssetGroup.get("assets");
            assertThat(userAssetGroup.size(), is(2));
            assertThat(assets.size(), is(2));
        }
    }

    @Test
    public void getUserTenantContainer() {
        final TenantContainer chain = callGETRestService("/user/applicableTenants", TenantContainer.class);
        assertThat(chain, is(notNullValue()));
    }
}
