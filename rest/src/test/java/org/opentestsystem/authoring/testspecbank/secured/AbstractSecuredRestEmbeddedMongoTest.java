/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.secured;

import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testspecbank.domain.Permissions;
import org.opentestsystem.authoring.testspecbank.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testspectbank.security.TenantEnforcementService;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantSubscription;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.domain.SbacPermission;
import org.opentestsystem.shared.security.domain.SbacRole;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.domain.TenantContainer;
import org.opentestsystem.shared.security.service.TenancyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.TestingAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Multimap;
import com.google.common.collect.Sets;

@WebAppConfiguration
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:security/testSecurityContext.xml" })
public abstract class AbstractSecuredRestEmbeddedMongoTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private TenancyService tenancyService;

    @Autowired
    private TenantEnforcementService tenantEnforcementService;

    @Autowired
    private ProgManClient progManClient;

    private final Tenant tenant1 = buildTenant("id1", "tenant1", "description1");

    private TenantContainer tenantContainer;

    private Set<SbacEntity> entities;

    private static final String COMPONENT_NAME = "TestAuthoring";

    static {
        System.setProperty("component.name", COMPONENT_NAME);
    }

    public void setUserWithRoles(final List<Permissions> inPermissions, final String tenantId) {
        final Tenant myTenant = PODAM_FACTORY.manufacturePojo(Tenant.class);
        myTenant.setId(tenantId);
        final TenantSubscription tenantSubscription = PODAM_FACTORY.manufacturePojo(TenantSubscription.class);
        tenantSubscription.getComponent().setName(COMPONENT_NAME);
        tenantSubscription.setEffectiveDate(new DateTime().minusWeeks(1));
        tenantSubscription.setExpirationDate(null);
        tenantSubscription.setInGoodStanding(true);
        myTenant.setTenantSubscriptions(ImmutableList.of(tenantSubscription));
        this.tenantContainer = PODAM_FACTORY.manufacturePojo(TenantContainer.class);
        this.tenantContainer.addAllTenants(ImmutableList.of(myTenant));
        this.entities = Sets.newHashSet(new SbacEntity(myTenant.getType(), myTenant.getId(), myTenant.getName()));

        final Map<String, Collection<SbacPermission>> permissionsMap = new HashMap<String, Collection<SbacPermission>>();
        final Collection<SbacPermission> permissionCollection = new ArrayList<SbacPermission>();
        final Multimap<String, SbacPermission> permissions = ArrayListMultimap.create();
        final Multimap<String, SbacRole> roles = ArrayListMultimap.create();

        for (final Permissions inPermission : inPermissions) {
            final SbacPermission permission = new SbacPermission();
            permission.setComponentName(COMPONENT_NAME);
            permission.setName(inPermission.getTitle());
            permissions.put(inPermission.name(), permission);

            permissionCollection.add(permission);
            permissionsMap.put(inPermission.getTitle(), permissionCollection);
            permissions.put(inPermission.getTitle(), permission);

            final SbacRole role = new SbacRole();
            role.setIsApplicableToTenant(true);
            role.setRoleName(inPermission.getTitle());
            role.setRoleEntityLevel(myTenant.getType().name());
            role.addEntityValue(myTenant.getType(), myTenant.getId(), myTenant.getName());
            role.setPermissions(permissionCollection);
            role.setEffectiveTenant(myTenant);
            roles.put(role.getRoleName(), role);
        }

        final SbacUser user = new SbacUser(roles, null);
        SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken(user, null, new ArrayList<GrantedAuthority>(user.getAuthorities())));

        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);
        when(this.userService.getCurrentUser()).thenReturn(user);
        tenantEnforcementService.setUserService(userService);
    }
}
