/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.validation.ConstraintViolationException;

import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.authoring.testspecbank.domain.ExportPackageStatus;
import org.opentestsystem.authoring.testspecbank.domain.Purpose;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecification;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecificationXmlBuilder;
import org.opentestsystem.authoring.testspecbank.domain.search.TestSpecificationSearchRequest;
import org.opentestsystem.authoring.testspecbank.persistence.TestSpecificationRepository;
import org.opentestsystem.authoring.testspecbank.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

public class TestSpecificationRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private TestSpecificationRepository testSpecificationRepository;

    @Test
    public void saveTestSpecificationTest() {
        final TestSpecification testSpecification = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecification.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.ADMINISTRATION)));
        final TestSpecification savedTestSpecification = this.testSpecificationRepository.save(testSpecification);
        assertThat(savedTestSpecification, is(notNullValue()));
        assertThat(savedTestSpecification.getId(), is(notNullValue()));
    }

    @Ignore
    @Test(expected = DuplicateKeyException.class)
    public void saveTestSpecificationWithDuplicateNameVersionThrowsError() {
        final TestSpecification testSpecification = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecification.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.ADMINISTRATION)));
        final TestSpecification savedTestSpecification = this.testSpecificationRepository.save(testSpecification);
        assertThat(savedTestSpecification, is(notNullValue()));
        final TestSpecification foundTestSpecification = this.testSpecificationRepository.findOne(savedTestSpecification.getId());
        assertThat(foundTestSpecification.getName(), is(equalTo(savedTestSpecification.getName())));
        assertThat(foundTestSpecification.getVersion(), is(equalTo(savedTestSpecification.getVersion())));
        this.testSpecificationRepository.save(foundTestSpecification);
    }

    @Test(expected = ConstraintViolationException.class)
    public void saveMissingIndexTestSpecificationTest() {
        final TestSpecification testSpecification = new TestSpecification();
        this.testSpecificationRepository.save(testSpecification);
    }

    @Test
    public void findTestSpecificationTest() {
        final TestSpecification testSpecification = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecification.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.REGISTRATION)));
        final TestSpecification savedTestSpecification = this.testSpecificationRepository.save(testSpecification);
        assertThat(savedTestSpecification, is(notNullValue()));
        final TestSpecification foundTestSpecification = this.testSpecificationRepository.findOne(savedTestSpecification.getId());
        assertThat(savedTestSpecification.getId(), is(equalTo(foundTestSpecification.getId())));
    }

    @Test
    public void removeTestSpecificationTest() {
        final TestSpecification testSpecification = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecification.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.SCORING)));
        final TestSpecification savedTestSpecification = this.testSpecificationRepository.save(testSpecification);
        this.testSpecificationRepository.delete(testSpecification);
        final TestSpecification foundTestSpecification = this.testSpecificationRepository.findOne(savedTestSpecification.getId());
        assertThat(foundTestSpecification, is(nullValue()));
    }

    @Test
    public void searchTestSpecifications() {
        final TestSpecification testSpecificationToSave = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecificationToSave.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.COMPLETE)));
        final TestSpecification savedTestSpecification = this.testSpecificationRepository.save(testSpecificationToSave);
        assertThat(savedTestSpecification, is(not(nullValue())));

        final TestSpecification testSpecificationToSave2 = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecificationToSave2.setSpecificationXml(TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(Purpose.REPORTING)));
        final TestSpecification savedTestSpecification2 = this.testSpecificationRepository.save(testSpecificationToSave2);
        assertThat(savedTestSpecification2, is(not(nullValue())));

        Map<String, String[]> params = ImmutableMap.of("name", new String[] { savedTestSpecification.getName() });
        TestSpecificationSearchRequest searchRequest = new TestSpecificationSearchRequest(params);
        SearchResponse<TestSpecification> searchResponse = this.testSpecificationRepository.search(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(1));

        params = ImmutableMap.of("subjectAbbreviation", new String[] { savedTestSpecification.getSubjectAbbreviation() });
        searchRequest = new TestSpecificationSearchRequest(params);
        searchResponse = this.testSpecificationRepository.search(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(1));

        params = ImmutableMap.of("subjectAbbreviation", new String[] { "bad abbreviation" });
        searchRequest = new TestSpecificationSearchRequest(params);
        searchResponse = this.testSpecificationRepository.search(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(0));

        params = ImmutableMap.of("grade", new String[] { savedTestSpecification.getGrade()[0], savedTestSpecification2.getGrade()[1] });
        searchRequest = new TestSpecificationSearchRequest(params);
        searchResponse = this.testSpecificationRepository.search(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(2));

        params = ImmutableMap.of("grade", new String[] { savedTestSpecification.getGrade()[0], "bad" });
        searchRequest = new TestSpecificationSearchRequest(params);
        searchResponse = this.testSpecificationRepository.search(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(1));

        params = ImmutableMap.of("grade", new String[] { savedTestSpecification.getGrade()[0], savedTestSpecification.getGrade()[1] });
        searchRequest = new TestSpecificationSearchRequest(params);
        searchResponse = this.testSpecificationRepository.search(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(1));

        params = ImmutableMap.of("grade", new String[] { "nope", "bad" });
        searchRequest = new TestSpecificationSearchRequest(params);
        searchResponse = this.testSpecificationRepository.search(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(0));
    }

    @Test
    public void testFindByExportPackageStatusIn() {
        TestSpecification testSpecification = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        testSpecification.getExportPackage().setStatus(ExportPackageStatus.SUBMITTED);
        testSpecification = this.testSpecificationRepository.save(testSpecification);
        assertThat(testSpecification, is(not(nullValue())));

        TestSpecification anotherTestSpecification = PODAM_FACTORY.manufacturePojo(TestSpecification.class);
        anotherTestSpecification.getExportPackage().setStatus(ExportPackageStatus.COMPLETE);
        anotherTestSpecification = this.testSpecificationRepository.save(anotherTestSpecification);
        assertThat(anotherTestSpecification, is(not(nullValue())));

        final List<TestSpecification> foundTestSpecifications = this.testSpecificationRepository.findByExportPackageStatusIn(ImmutableSet.of(ExportPackageStatus.SUBMITTED));
        assertThat(foundTestSpecifications.size(), is(1));
        assertThat(foundTestSpecifications.get(0).getId(), is(testSpecification.getId()));

        final List<TestSpecification> foundTestSpecifications2 = this.testSpecificationRepository.findByExportPackageStatusIn(ImmutableSet.of(ExportPackageStatus.COMPLETE));
        assertThat(foundTestSpecifications2.size(), is(1));
        assertThat(foundTestSpecifications2.get(0).getId(), is(anotherTestSpecification.getId()));

        final List<TestSpecification> foundTestSpecifications3 = this.testSpecificationRepository.findByExportPackageStatusIn(ImmutableSet.of(ExportPackageStatus.SUBMITTED,
                ExportPackageStatus.COMPLETE));
        assertThat(foundTestSpecifications3.size(), is(2));

        final List<TestSpecification> foundTestSpecifications4 = this.testSpecificationRepository.findByExportPackageStatusIn(ImmutableSet.of(ExportPackageStatus.FAILED));
        assertThat(foundTestSpecifications4.size(), is(0));

        final List<TestSpecification> foundTestSpecifications5 = this.testSpecificationRepository.findByExportPackageStatusIn(new HashSet<ExportPackageStatus>());
        assertThat(foundTestSpecifications5.size(), is(0));
    }
}
