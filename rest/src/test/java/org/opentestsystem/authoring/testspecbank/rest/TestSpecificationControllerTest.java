/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;
import org.mockito.internal.util.collections.Sets;
import org.opentestsystem.authoring.testspecbank.domain.ExportPackage;
import org.opentestsystem.authoring.testspecbank.domain.ExportPackageStatus;
import org.opentestsystem.authoring.testspecbank.domain.Purpose;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecification;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecificationXmlBuilder;
import org.opentestsystem.authoring.testspecbank.persistence.TestSpecificationRepository;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

public class TestSpecificationControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/testSpecification";

    @Autowired
    private TestSpecificationRepository testSpecificationRepository;

    private TestSpecification savedTestSpecification = null;
    private Map<String, Object> map = null;

    @ApiDocExample(rank = -1)
    @Before
    public void loadTestSpecification() {
        this.map = buildTestSpecificationMap(0, Purpose.COMPLETE);
        this.savedTestSpecification = callPOSTRestService(BASE_URL, this.map, TestSpecification.class);
        assertThat(this.savedTestSpecification, is(notNullValue()));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void getTestSpecification() {
        final TestSpecification response = callGETRestService("/testSpecification/" + this.savedTestSpecification.getId(), TestSpecification.class);
        assertThat(response, is(notNullValue()));
        assertThat(response.getCategory(), is(equalTo(this.savedTestSpecification.getCategory())));
        assertThat(response.getGrade(), is(equalTo(this.savedTestSpecification.getGrade())));
        assertThat(response.getLabel(), is(equalTo(this.savedTestSpecification.getLabel())));
        assertThat(response.getName(), is(equalTo(this.savedTestSpecification.getName())));
        assertThat(response.getPurpose(), is(equalTo(this.savedTestSpecification.getPurpose())));
        assertThat(response.getSpecificationXmlGridFsId(), is(equalTo(this.savedTestSpecification.getSpecificationXmlGridFsId())));
        assertThat(response.getSubjectAbbreviation(), is(equalTo(this.savedTestSpecification.getSubjectAbbreviation())));
        assertThat(response.getTenantId(), is(equalTo(this.savedTestSpecification.getTenantId())));
        assertThat(response.getType(), is(equalTo(this.savedTestSpecification.getType())));
        assertThat(response.getVersion(), is(equalTo(this.savedTestSpecification.getVersion())));
        assertThat(response.getSpecificationXml(), is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void getTestSpecificationWithoutXml() {
        final TestSpecification response = callGETRestService("/testSpecification/" + this.savedTestSpecification.getId() + "?excludeXml=true", TestSpecification.class);
        assertThat(response, is(notNullValue()));
        assertThat(response.getSpecificationXml(), is(nullValue()));
        assertThat(response.getName(), is(this.savedTestSpecification.getName()));
    }

    @ApiDocExample(rank = 3)
    @SuppressWarnings("unchecked")
    @Test
    public void searchTestSpecificationByName() {
        final Map<String, String> params = ImmutableMap.of("tenantSet", "tenantId0", "name", "aName0");
        final SearchResponse<TestSpecification> response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = 4)
    @SuppressWarnings("unchecked")
    @Test
    public void searchTestSpecificationByVersion() {
        final Map<String, String> params = ImmutableMap.of("tenantSet", "tenantId0", "version", "0.0");
        final SearchResponse<TestSpecification> response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void searchTestSpecificationByTenantId() {
        final Map<String, String> params = ImmutableMap.of("tenantSet", "tenantId0");
        final SearchResponse<TestSpecification> response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = 6)
    @SuppressWarnings("unchecked")
    @Test
    public void searchTestSpecificationByPurpose() {
        final Map<String, String> params = ImmutableMap.of("tenantSet", "tenantId0", "purpose", Purpose.COMPLETE.toString());
        final SearchResponse<Map<String, Object>> response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));
        assertThat(response.getSearchResults().get(0).get("specificationXml"), is(nullValue()));
    }

    @ApiDocExample(rank = 7)
    @SuppressWarnings("unchecked")
    @Test
    public void searchTestSpecificationWithExcludeXml() {
        final Map<String, String> params = ImmutableMap.of("tenantSet", "tenantId0", "includeXml", "true");
        final SearchResponse<Map<String, Object>> response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));
        assertThat(response.getSearchResults().get(0).get("specificationXml"), is(notNullValue()));
    }

    @ApiDocExample(rank = 8)
    @Test
    public void saveTestSpecification() throws InterruptedException {
        callPOSTRestService(BASE_URL, buildTestSpecificationMap(1, Purpose.REGISTRATION), TestSpecification.class);
        assertThat(this.mongoTemplate.findAll(TestSpecification.class).size(), is(equalTo(2)));
    }

    @ApiDocExample(rank = 9)
    @Test
    public void updateTenantSet() throws InterruptedException {
        final Set<String> tenantSet = Sets.newSet();
        tenantSet.add("new-tenant-id");
        tenantSet.add("another-tenant-id");
        this.savedTestSpecification = callPUTRestServiceWithSet(BASE_URL + "/" + this.savedTestSpecification.getId() + "/updateTenantSet", tenantSet, TestSpecification.class);
        assertThat(this.savedTestSpecification.getTenantSet().size(), is(equalTo(2)));
    }

    @ApiDocExample(rank = 10)
    @Test(expected = AssertionError.class)
    public void searchTestSpecificationWithoutTenantIdCausesError() {
        final Map<String, String> params = ImmutableMap.of("purpose", Purpose.COMPLETE.toString());
        callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        fail("Cannot call without tenant ID");
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 11)
    @Test
    public void searchTestSpecificationNotFound() {
        final Map<String, String> params = ImmutableMap.of("tenantSet", "tenantId0", "purpose", Purpose.SCORING.toString());
        final SearchResponse<TestSpecification> response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(0));
        assertThat(response.getSearchResults().size(), is(0));
    }

    @ApiDocExample(rank = 12)
    @Test
    public final void testRequestExport() {
        final TestSpecification updatedSpec = callPOSTRestService(BASE_URL + "/" + savedTestSpecification.getId() + "/exportPackage", new HashMap<String, Object>(), TestSpecification.class);
        assertThat(updatedSpec.getId(), is(savedTestSpecification.getId()));
        assertThat(updatedSpec.getExportPackage().getStatus(), is(ExportPackageStatus.SUBMITTED));
        assertThat(updatedSpec.getExportPackage().getTimeRequested(), is(notNullValue()));
        assertThat(updatedSpec.getExportPackage().getZipFileNames(), is(nullValue()));
    }

    @ApiDocExample(rank = 13)
    @Test
    public final void testRetryExport() {
        savedTestSpecification.setExportPackage(PODAM_FACTORY.manufacturePojo(ExportPackage.class));
        savedTestSpecification.getExportPackage().setStatus(ExportPackageStatus.COMPLETE);
        savedTestSpecification = testSpecificationRepository.save(savedTestSpecification);

        final TestSpecification retriedSpec = callPUTRestService(BASE_URL + "/" + savedTestSpecification.getId() + "/retryExportPackage", new HashMap<String, Object>(), TestSpecification.class);
        assertThat(retriedSpec.getId(), is(savedTestSpecification.getId()));
        assertThat(retriedSpec.getExportPackage().getStatus(), is(ExportPackageStatus.SUBMITTED));
        assertThat(retriedSpec.getExportPackage().getZipFileNames(), is(nullValue()));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 14)
    @Test
    public void getSpecificationPurposes() {
        final List<Purpose> response = callGETRestService("/testSpecification/purpose", List.class);
        assertThat(response.size(), is(Purpose.values().length));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 15)
    @Test
    public void getExportStatuses() {
        final List<ExportPackageStatus> response = callGETRestService("/testSpecification/exportStatus", List.class);
        assertThat(response.size(), is(ExportPackageStatus.values().length));
    }

    @ApiDocExample(rank = 16)
    @Test
    public void getSpecificationXml() throws InterruptedException {
        final ResponseEntity<byte[]> response = callGETResponseEntityRestService(BASE_URL + "/" + this.savedTestSpecification.getId() + "/specXml");
        assertThat(response, is(notNullValue()));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = -1)
    @Test
    public void searchTestSpecifications() {
        for (int i = 1; i < 10; i++) {
            callPOSTRestService(BASE_URL, buildTestSpecificationMap(i, Purpose.SCORING), TestSpecification.class);
        }
        assertThat(this.mongoTemplate.findAll(TestSpecification.class).size(), is(10));

        final Map<String, String> params = Maps.newHashMap();
        params.put("name", "name1");
        params.put("tenantSet", "tenantId1");

        SearchResponse<TestSpecification> response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("name", "name3");
        params.put("tenantSet", "tenantId3");
        response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("name", "invalid");
        params.put("tenantSet", "tenantId0");
        response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(0));
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("name", "name");
        params.put("tenantSet", "tenantId0");
        response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("tenantSet", "tenantId0");
        response = callGETRestService("/testSpecification" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));
    }

    private Map<String, Object> buildTestSpecificationMap(final int uniqueId, final Purpose purpose) {
        final String incr = String.valueOf(uniqueId);
        final Map<String, Object> testSpecification = Maps.newHashMap();
        testSpecification.put("name", "aName" + incr);
        testSpecification.put("version", "0." + incr);
        testSpecification.put("tenantId", "tenantId" + incr);
        testSpecification.put("purpose", purpose);
        testSpecification.put("grade", new String[] { "2", "3", "4" });
        testSpecification.put("subjectAbbreviation", "MTH");
        testSpecification.put("subjectName", "Math");
        testSpecification.put("label", "label-" + incr);
        testSpecification.put("type", "FORMATIVE");
        testSpecification.put("category", "category-" + incr);
        testSpecification.put("specificationXml", TestSpecificationXmlBuilder.generateXml(TestSpecificationXmlBuilder.buildValidTestspecification(purpose)));
        return testSpecification;
    }

    private ResponseEntity<byte[]> callGETResponseEntityRestService(final String uri) {
        ResponseEntity<byte[]> object = null;
        try {
            final MockHttpServletRequestBuilder get = MockMvcRequestBuilders.get(uri);
            final MvcResult result = this.mockMvc.perform(get).andExpect(status().isOk()).andReturn();
            final byte[] responseGet = result.getResponse().getContentAsByteArray();
            if (responseGet != null && responseGet.length > 1) {
                object = new ResponseEntity<byte[]>(responseGet, HttpStatus.OK);
            }
        } catch (final Exception e) {
            throw new RestException("error int callGETResponseEntityRestService " + uri, e);
        }
        return object;
    }

}
