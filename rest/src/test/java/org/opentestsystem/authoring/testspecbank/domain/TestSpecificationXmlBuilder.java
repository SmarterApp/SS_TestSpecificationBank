/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.domain;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.Deflater;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.opentestsystem.authoring.testspecbank.generated.Administration;
import org.opentestsystem.authoring.testspecbank.generated.Adminsegment;
import org.opentestsystem.authoring.testspecbank.generated.Bpelement;
import org.opentestsystem.authoring.testspecbank.generated.Bpref;
import org.opentestsystem.authoring.testspecbank.generated.Complete;
import org.opentestsystem.authoring.testspecbank.generated.Computationrule;
import org.opentestsystem.authoring.testspecbank.generated.Computationruleparameter;
import org.opentestsystem.authoring.testspecbank.generated.Computationruleparametervalue;
import org.opentestsystem.authoring.testspecbank.generated.Enemy;
import org.opentestsystem.authoring.testspecbank.generated.Enemylist;
import org.opentestsystem.authoring.testspecbank.generated.Formpartition;
import org.opentestsystem.authoring.testspecbank.generated.Groupitem;
import org.opentestsystem.authoring.testspecbank.generated.Itemgroup;
import org.opentestsystem.authoring.testspecbank.generated.Itempool;
import org.opentestsystem.authoring.testspecbank.generated.Itemscoredimension;
import org.opentestsystem.authoring.testspecbank.generated.Itemscoreparameter;
import org.opentestsystem.authoring.testspecbank.generated.Passage;
import org.opentestsystem.authoring.testspecbank.generated.Passageref;
import org.opentestsystem.authoring.testspecbank.generated.Performancelevel;
import org.opentestsystem.authoring.testspecbank.generated.Performancelevels;
import org.opentestsystem.authoring.testspecbank.generated.Poolproperty;
import org.opentestsystem.authoring.testspecbank.generated.Property;
import org.opentestsystem.authoring.testspecbank.generated.Registration;
import org.opentestsystem.authoring.testspecbank.generated.Registrationform;
import org.opentestsystem.authoring.testspecbank.generated.Registrationsegment;
import org.opentestsystem.authoring.testspecbank.generated.Reporting;
import org.opentestsystem.authoring.testspecbank.generated.Reportingmeasure;
import org.opentestsystem.authoring.testspecbank.generated.Reportingmeasures;
import org.opentestsystem.authoring.testspecbank.generated.Scoretype;
import org.opentestsystem.authoring.testspecbank.generated.Scoring;
import org.opentestsystem.authoring.testspecbank.generated.Scoringrules;
import org.opentestsystem.authoring.testspecbank.generated.Segmentform;
import org.opentestsystem.authoring.testspecbank.generated.Testblueprint;
import org.opentestsystem.authoring.testspecbank.generated.Testform;
import org.opentestsystem.authoring.testspecbank.generated.Testitem;
import org.opentestsystem.authoring.testspecbank.generated.Testspecification;
import org.opentestsystem.shared.exception.LocalizedException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;

public final class TestSpecificationXmlBuilder {
    private static final Logger LOGGER = LoggerFactory.getLogger(TestSpecificationXmlBuilder.class);
    public static final int BUFFER_SIZE = 4096;

    private static Marshaller JAXB_MARSHALLER = null;
    private static final PodamFactory FACTORY = new PodamFactoryImpl();

    private TestSpecificationXmlBuilder() {
        // private constructor
    }

    static {
        try {
            JAXB_MARSHALLER = JAXBContext.newInstance(Testspecification.class).createMarshaller();
            JAXB_MARSHALLER.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        } catch (final JAXBException e) {
            e.printStackTrace();
        }
    }

    public static Testspecification buildValidTestspecification(final Purpose purpose) {
        switch (purpose) {
        case REGISTRATION:
            return buildValidRegistrationTestspecification();
        case ADMINISTRATION:
            return buildValidAdministrationTestspecification();
        case SCORING:
            return buildValidScoringTestspecification();
        case REPORTING:
            return buildValidReportingTestspecification();
        case COMPLETE:
            return buildValidCompleteTestspecification();
        default:
            return null;
        }
    }

    private static Testspecification buildValidRegistrationTestspecification() {
        final Testspecification voTestSpec = FACTORY.manufacturePojo(Testspecification.class);
        final Registration registration = FACTORY.manufacturePojo(Registration.class);

        final Registrationform registrationform = FACTORY.manufacturePojo(Registrationform.class);
        registrationform.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        registrationform.getProperty().add(FACTORY.manufacturePojo(Property.class));
        registration.getRegistrationform().add(registrationform);

        final Registrationsegment registrationsegment = FACTORY.manufacturePojo(Registrationsegment.class);
        registrationsegment.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        registration.getRegistrationsegment().add(registrationsegment);

        registration.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));

        voTestSpec.getAdministrationOrRegistrationOrReportingOrScoringOrComplete().add(registration);
        voTestSpec.getProperty().add(FACTORY.manufacturePojo(Property.class));
        return voTestSpec;
    }

    private static Testspecification buildValidAdministrationTestspecification() {
        final Testspecification voTestSpec = FACTORY.manufacturePojo(Testspecification.class);
        final Administration administration = FACTORY.manufacturePojo(Administration.class);

        final Testform testform = FACTORY.manufacturePojo(Testform.class);
        final Formpartition formpartition = FACTORY.manufacturePojo(Formpartition.class);
        final Itemgroup itemgroup = FACTORY.manufacturePojo(Itemgroup.class);
        itemgroup.getGroupitem().add(FACTORY.manufacturePojo(Groupitem.class));
        itemgroup.getProperty().add(FACTORY.manufacturePojo(Property.class));
        itemgroup.getPassageref().add(FACTORY.manufacturePojo(Passageref.class));
        formpartition.getItemgroup().add(itemgroup);
        testform.getFormpartition().add(formpartition);
        testform.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        testform.getProperty().add(FACTORY.manufacturePojo(Property.class));
        administration.getTestform().add(testform);

        final Testblueprint testblueprint = FACTORY.manufacturePojo(Testblueprint.class);
        testblueprint.getBpelement().add(FACTORY.manufacturePojo(Bpelement.class));
        testblueprint.getProperty().add(FACTORY.manufacturePojo(Property.class));
        administration.setTestblueprint(testblueprint);

        final Itempool itempool = FACTORY.manufacturePojo(Itempool.class);
        final Enemylist enemylist = FACTORY.manufacturePojo(Enemylist.class);
        enemylist.getEnemy().add(FACTORY.manufacturePojo(Enemy.class));
        itempool.getEnemylist().add(enemylist);
        final Passage passage = FACTORY.manufacturePojo(Passage.class);
        passage.getProperty().add(FACTORY.manufacturePojo(Property.class));
        itempool.getPassage().add(passage);
        final Testitem testitem = FACTORY.manufacturePojo(Testitem.class);
        testitem.getBpref().add(FACTORY.manufacturePojo(Bpref.class));
        final Itemscoredimension itemscoredimension = FACTORY.manufacturePojo(Itemscoredimension.class);
        itemscoredimension.getItemscoreparameter().add(FACTORY.manufacturePojo(Itemscoreparameter.class));
        itemscoredimension.getProperty().add(FACTORY.manufacturePojo(Property.class));
        testitem.getItemscoredimension().add(itemscoredimension);
        testitem.getPassageref().add(FACTORY.manufacturePojo(Passageref.class));
        testitem.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        itempool.getTestitem().add(testitem);
        administration.setItempool(itempool);

        administration.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));

        voTestSpec.getAdministrationOrRegistrationOrReportingOrScoringOrComplete().add(administration);
        voTestSpec.getProperty().add(FACTORY.manufacturePojo(Property.class));
        return voTestSpec;
    }

    private static Testspecification buildValidScoringTestspecification() {
        final Testspecification voTestSpec = FACTORY.manufacturePojo(Testspecification.class);
        final Scoring scoring = FACTORY.manufacturePojo(Scoring.class);

        final Testform testform = FACTORY.manufacturePojo(Testform.class);
        final Formpartition formpartition = FACTORY.manufacturePojo(Formpartition.class);
        final Itemgroup itemgroup = FACTORY.manufacturePojo(Itemgroup.class);
        itemgroup.getGroupitem().add(FACTORY.manufacturePojo(Groupitem.class));
        itemgroup.getProperty().add(FACTORY.manufacturePojo(Property.class));
        itemgroup.getPassageref().add(FACTORY.manufacturePojo(Passageref.class));
        formpartition.getItemgroup().add(itemgroup);
        testform.getFormpartition().add(formpartition);
        testform.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        testform.getProperty().add(FACTORY.manufacturePojo(Property.class));
        scoring.getTestform().add(testform);

        final Testblueprint testblueprint = FACTORY.manufacturePojo(Testblueprint.class);
        testblueprint.getBpelement().add(FACTORY.manufacturePojo(Bpelement.class));
        testblueprint.getProperty().add(FACTORY.manufacturePojo(Property.class));
        scoring.setTestblueprint(testblueprint);

        final Itempool itempool = FACTORY.manufacturePojo(Itempool.class);
        final Enemylist enemylist = FACTORY.manufacturePojo(Enemylist.class);
        enemylist.getEnemy().add(FACTORY.manufacturePojo(Enemy.class));
        itempool.getEnemylist().add(enemylist);
        final Passage passage = FACTORY.manufacturePojo(Passage.class);
        passage.getProperty().add(FACTORY.manufacturePojo(Property.class));
        itempool.getPassage().add(passage);
        final Testitem testitem = FACTORY.manufacturePojo(Testitem.class);
        testitem.getBpref().add(FACTORY.manufacturePojo(Bpref.class));
        final Itemscoredimension itemscoredimension = FACTORY.manufacturePojo(Itemscoredimension.class);
        itemscoredimension.getItemscoreparameter().add(FACTORY.manufacturePojo(Itemscoreparameter.class));
        itemscoredimension.getProperty().add(FACTORY.manufacturePojo(Property.class));
        testitem.getItemscoredimension().add(itemscoredimension);
        testitem.getPassageref().add(FACTORY.manufacturePojo(Passageref.class));
        testitem.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        itempool.getTestitem().add(testitem);
        scoring.setItempool(itempool);

        final Performancelevels performancelevels = FACTORY.manufacturePojo(Performancelevels.class);
        performancelevels.getPerformancelevel().add(FACTORY.manufacturePojo(Performancelevel.class));
        scoring.setPerformancelevels(performancelevels);

        final Scoringrules scoringrules = FACTORY.manufacturePojo(Scoringrules.class);
        final Computationrule computationrule = FACTORY.manufacturePojo(Computationrule.class);
        final Computationruleparameter computationruleparameter = FACTORY.manufacturePojo(Computationruleparameter.class);
        final Computationruleparametervalue computationruleparametervalue = FACTORY.manufacturePojo(Computationruleparametervalue.class);
        computationruleparameter.getComputationruleparametervalue().add(computationruleparametervalue);
        computationrule.getComputationruleparameter().add(computationruleparameter);
        scoringrules.getComputationrule().add(computationrule);
        scoring.setScoringrules(scoringrules);

        voTestSpec.getAdministrationOrRegistrationOrReportingOrScoringOrComplete().add(scoring);
        voTestSpec.getProperty().add(FACTORY.manufacturePojo(Property.class));
        return voTestSpec;
    }

    private static Testspecification buildValidReportingTestspecification() {
        final Testspecification voTestSpec = FACTORY.manufacturePojo(Testspecification.class);
        final Reporting reporting = FACTORY.manufacturePojo(Reporting.class);

        final Testform testform = FACTORY.manufacturePojo(Testform.class);
        final Formpartition formpartition = FACTORY.manufacturePojo(Formpartition.class);
        final Itemgroup itemgroup = FACTORY.manufacturePojo(Itemgroup.class);
        itemgroup.getGroupitem().add(FACTORY.manufacturePojo(Groupitem.class));
        itemgroup.getProperty().add(FACTORY.manufacturePojo(Property.class));
        itemgroup.getPassageref().add(FACTORY.manufacturePojo(Passageref.class));
        formpartition.getItemgroup().add(itemgroup);
        testform.getFormpartition().add(formpartition);
        testform.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        testform.getProperty().add(FACTORY.manufacturePojo(Property.class));
        reporting.getTestform().add(testform);

        final Testblueprint testblueprint = FACTORY.manufacturePojo(Testblueprint.class);
        testblueprint.getBpelement().add(FACTORY.manufacturePojo(Bpelement.class));
        testblueprint.getProperty().add(FACTORY.manufacturePojo(Property.class));
        reporting.setTestblueprint(testblueprint);

        final Itempool itempool = FACTORY.manufacturePojo(Itempool.class);
        final Enemylist enemylist = FACTORY.manufacturePojo(Enemylist.class);
        enemylist.getEnemy().add(FACTORY.manufacturePojo(Enemy.class));
        itempool.getEnemylist().add(enemylist);
        final Passage passage = FACTORY.manufacturePojo(Passage.class);
        passage.getProperty().add(FACTORY.manufacturePojo(Property.class));
        itempool.getPassage().add(passage);
        final Testitem testitem = FACTORY.manufacturePojo(Testitem.class);
        testitem.getBpref().add(FACTORY.manufacturePojo(Bpref.class));
        final Itemscoredimension itemscoredimension = FACTORY.manufacturePojo(Itemscoredimension.class);
        itemscoredimension.getItemscoreparameter().add(FACTORY.manufacturePojo(Itemscoreparameter.class));
        itemscoredimension.getProperty().add(FACTORY.manufacturePojo(Property.class));
        testitem.getItemscoredimension().add(itemscoredimension);
        testitem.getPassageref().add(FACTORY.manufacturePojo(Passageref.class));
        testitem.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        itempool.getTestitem().add(testitem);
        reporting.setItempool(itempool);

        final Performancelevels performancelevels = FACTORY.manufacturePojo(Performancelevels.class);
        performancelevels.getPerformancelevel().add(FACTORY.manufacturePojo(Performancelevel.class));
        reporting.setPerformancelevels(performancelevels);

        final Reportingmeasures reportingmeasures = FACTORY.manufacturePojo(Reportingmeasures.class);
        final Reportingmeasure reportingmeasure = FACTORY.manufacturePojo(Reportingmeasure.class);
        final Scoretype scoretype = FACTORY.manufacturePojo(Scoretype.class);
        reportingmeasure.getScoretype().add(scoretype);
        reportingmeasures.getReportingmeasure().add(reportingmeasure);
        reporting.setReportingmeasures(reportingmeasures);

        voTestSpec.getAdministrationOrRegistrationOrReportingOrScoringOrComplete().add(reporting);
        voTestSpec.getProperty().add(FACTORY.manufacturePojo(Property.class));
        return voTestSpec;
    }

    private static Testspecification buildValidCompleteTestspecification() {
        final Testspecification voTestSpec = FACTORY.manufacturePojo(Testspecification.class);
        final Complete complete = FACTORY.manufacturePojo(Complete.class);

        final Testform testform = FACTORY.manufacturePojo(Testform.class);
        final Formpartition formpartition = FACTORY.manufacturePojo(Formpartition.class);
        final Itemgroup itemgroup = FACTORY.manufacturePojo(Itemgroup.class);
        itemgroup.getGroupitem().add(FACTORY.manufacturePojo(Groupitem.class));
        itemgroup.getProperty().add(FACTORY.manufacturePojo(Property.class));
        itemgroup.getPassageref().add(FACTORY.manufacturePojo(Passageref.class));
        formpartition.getItemgroup().add(itemgroup);
        testform.getFormpartition().add(formpartition);
        testform.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        testform.getProperty().add(FACTORY.manufacturePojo(Property.class));
        complete.getTestform().add(testform);

        final Testblueprint testblueprint = FACTORY.manufacturePojo(Testblueprint.class);
        testblueprint.getBpelement().add(FACTORY.manufacturePojo(Bpelement.class));
        testblueprint.getProperty().add(FACTORY.manufacturePojo(Property.class));
        complete.setTestblueprint(testblueprint);

        final Itempool itempool = FACTORY.manufacturePojo(Itempool.class);
        final Enemylist enemylist = FACTORY.manufacturePojo(Enemylist.class);
        enemylist.getEnemy().add(FACTORY.manufacturePojo(Enemy.class));
        itempool.getEnemylist().add(enemylist);
        final Passage passage = FACTORY.manufacturePojo(Passage.class);
        passage.getProperty().add(FACTORY.manufacturePojo(Property.class));
        itempool.getPassage().add(passage);
        final Testitem testitem = FACTORY.manufacturePojo(Testitem.class);
        testitem.getBpref().add(FACTORY.manufacturePojo(Bpref.class));
        final Itemscoredimension itemscoredimension = FACTORY.manufacturePojo(Itemscoredimension.class);
        itemscoredimension.getItemscoreparameter().add(FACTORY.manufacturePojo(Itemscoreparameter.class));
        itemscoredimension.getProperty().add(FACTORY.manufacturePojo(Property.class));
        testitem.getItemscoredimension().add(itemscoredimension);
        testitem.getPassageref().add(FACTORY.manufacturePojo(Passageref.class));
        testitem.getPoolproperty().add(FACTORY.manufacturePojo(Poolproperty.class));
        itempool.getTestitem().add(testitem);
        complete.setItempool(itempool);

        final Performancelevels performancelevels = FACTORY.manufacturePojo(Performancelevels.class);
        performancelevels.getPerformancelevel().add(FACTORY.manufacturePojo(Performancelevel.class));
        complete.setPerformancelevels(performancelevels);

        final Scoringrules scoringrules = FACTORY.manufacturePojo(Scoringrules.class);
        final Computationrule computationrule = FACTORY.manufacturePojo(Computationrule.class);
        final Computationruleparameter computationruleparameter = FACTORY.manufacturePojo(Computationruleparameter.class);
        final Computationruleparametervalue computationruleparametervalue = FACTORY.manufacturePojo(Computationruleparametervalue.class);
        computationruleparameter.getComputationruleparametervalue().add(computationruleparametervalue);
        computationrule.getComputationruleparameter().add(computationruleparameter);
        scoringrules.getComputationrule().add(computationrule);
        complete.setScoringrules(scoringrules);

        final Adminsegment adminsegment = FACTORY.manufacturePojo(Adminsegment.class);
        adminsegment.getSegmentpoolOrSegmentform().add(FACTORY.manufacturePojo(Segmentform.class));
        complete.getAdminsegment().add(adminsegment);

        final Reportingmeasures reportingmeasures = FACTORY.manufacturePojo(Reportingmeasures.class);
        final Reportingmeasure reportingmeasure = FACTORY.manufacturePojo(Reportingmeasure.class);
        final Scoretype scoretype = FACTORY.manufacturePojo(Scoretype.class);
        reportingmeasure.getScoretype().add(scoretype);
        reportingmeasures.getReportingmeasure().add(reportingmeasure);
        complete.setReportingmeasures(reportingmeasures);

        voTestSpec.getAdministrationOrRegistrationOrReportingOrScoringOrComplete().add(complete);
        voTestSpec.getProperty().add(FACTORY.manufacturePojo(Property.class));
        return voTestSpec;
    }

    public static byte[] generateXml(final Testspecification testspecification) {
        byte[] finishedXml = new byte[] { };

        try {
            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
            JAXB_MARSHALLER.marshal(testspecification, baos);
            LOGGER.info("finished XML: [" + baos.toString() + "]");
            finishedXml = baos.toByteArray();
        } catch (final JAXBException e) {
            LOGGER.error("JAXB marshal error: [" + e.getMessage() + "]", e);
        }

        return compress(finishedXml);
    }

    private static byte[] compress(final byte[] testSpecificationXml) {
        final Deflater deflater = new Deflater();
        deflater.setInput(testSpecificationXml);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream(testSpecificationXml.length);

        deflater.finish();

        byte[] outBytes = null;

        try {
            final byte[] buffer = new byte[BUFFER_SIZE];
            while (!deflater.finished()) {
                final int count = deflater.deflate(buffer);
                baos.write(buffer, 0, count);
            }
            baos.close();
            outBytes = baos.toByteArray();

        } catch (final IOException e) {
            throw new LocalizedException("publishingRecord.testspec.xml.compress.error", e);
        }

        return outBytes;
    }
}
