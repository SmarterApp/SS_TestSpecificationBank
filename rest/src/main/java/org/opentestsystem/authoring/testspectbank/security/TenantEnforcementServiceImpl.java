/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspectbank.security;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

@Service
public class TenantEnforcementServiceImpl implements TenantEnforcementService {

    //private static final Logger LOGGER = LoggerFactory.getLogger(TenantEnforcementServiceImpl.class);

    @Autowired
    private UserService userService;
    
    @Override
    public void enforceTenancyForObject(final Object verifyMe, final String[] permissionsToEnforce) {
        Set<String> tenantIds = findTenantIds(verifyMe);
        boolean readable = ensureRightsForTenantIds(tenantIds, permissionsToEnforce);
        if(!readable){
            throw new AccessDeniedException("You do not have rights to view this object");
        }
    }
    
    private boolean ensureRightsForTenantIds(final Set<String> tenantIds, final String[] permssions) {
        SbacUser user = userService.getCurrentUser();
        boolean validForAllTenants = true;
        if (tenantIds != null) {
            for (String tenantId : tenantIds) {
                boolean hasOne = false;
                if (!StringUtils.isEmpty(tenantId) && permssions != null) {
                    for (String permission : permssions) {
                        hasOne = hasOne || user.hasPermissionForTenant(permission,tenantId);
                    }
                }
                validForAllTenants = validForAllTenants && hasOne;
            }
        }
        return validForAllTenants;
    }

    @SuppressWarnings("unchecked")
    private Set<String> findTenantIds(final Object verifyMe) {
        final Set<String> tenantIds = new HashSet<String>();
        if (verifyMe instanceof String) {
            //bare tenantID
            tenantIds.add((String)verifyMe);
        } else if (verifyMe instanceof Tenanted) {
            //single tenanted object
            tenantIds.add(((Tenanted)verifyMe).getTenantId());
        } else if (verifyMe instanceof SearchResponse<?>) {
            List<?> results = ((SearchResponse<?>)verifyMe).getSearchResults();
            if (!CollectionUtils.isEmpty(results) && results.get(0) instanceof Tenanted) {
                for (Tenanted tenanted : (List<Tenanted>)results) {
                    //search response full of tenanted objects
                    tenantIds.add(tenanted.getTenantId());
                }
            }
        }
        return tenantIds;
    }
    
    @Override
    public void verifyUserIsConfiguredToReadObjects(Object obj, String permission) {
        Set<ReadAccessConfigurableByOwner> configuredReadable = findConfiguredReadable(obj);
        boolean readable = ensureAllObjectsAreReadableForUser(configuredReadable, permission);
        if(!readable){
            throw new AccessDeniedException("You do not have rights to view this object");
        }
    }
    
    private Set<ReadAccessConfigurableByOwner> findConfiguredReadable(final Object verifyMe) {
        final Set<ReadAccessConfigurableByOwner> readableObjects = new HashSet<ReadAccessConfigurableByOwner>();
        List<?> listofObjects = null;
        if (verifyMe instanceof ReadAccessConfigurableByOwner) {
            readableObjects.add((ReadAccessConfigurableByOwner)verifyMe);
        } else if (verifyMe instanceof SearchResponse<?>) {
            listofObjects = ((SearchResponse<?>)verifyMe).getSearchResults();
        } else if( verifyMe instanceof List) {
            listofObjects = (List<?>) verifyMe;
        }   
        if (!CollectionUtils.isEmpty(listofObjects)) {
            for(Object obj : listofObjects){
                readableObjects.addAll(findConfiguredReadable(obj));    
            }
        }
        return readableObjects;
    }
    
    private boolean ensureAllObjectsAreReadableForUser(final Set<ReadAccessConfigurableByOwner> objectsToRead, final String permission) {
        SbacUser user = userService.getCurrentUser();
        boolean readableForAllObjects = true;
        for(ReadAccessConfigurableByOwner verifyReadable : objectsToRead){
            boolean anyReadable = false;
            for(String tenantWithAccess : verifyReadable.getTenantSet()){
                 anyReadable = anyReadable || user.hasPermissionForTenant(permission, tenantWithAccess);        
                
            }
            readableForAllObjects = readableForAllObjects && anyReadable;
        }
        return readableForAllObjects;
    }
    
    public void setUserService(final UserService inUserService){
        this.userService = inUserService;
    }
}
