/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.rest;

import java.util.List;

import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Used to retrieve content from Program Management
 */
@Controller
public class ProgmanController extends AbstractRestController {

    @SuppressWarnings("unused")
    private static final Logger LOGGER = LoggerFactory.getLogger(ProgmanController.class);

    @Autowired
    private ProgManClient progManClient;

    /**
     * Passthrough endpoint which calls progman to retrieve tenant list by component id
     *
     * @param componentName
     * @param inGoodStanding
     * @param searchVal
     * @param tenantType
     * @param pageable Pageable
     * @return List of Tenant objects.
     */
    @RequestMapping(value = "/progman/tenant/component/name/{componentName}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public List<Tenant> findTenantsByComponentAndSearchVal(
            @PathVariable final String componentName,
            @RequestParam(value = "inGoodStanding", required = false) final Boolean inGoodStanding,
            @RequestParam(value = "searchVal", required = false) final String searchVal,
            @RequestParam(value = "tenantType", required = false) final TenantType tenantType,
            final Pageable pageable) {

        return progManClient.findTenantsByComponentAndSearchVal(componentName, inGoodStanding, searchVal, tenantType, pageable);
    }

    /**
     * Passthrough endpoint which calls progman to find tenant by tenantId.
     *
     * @param tenant id.
     * @return Tenant object.
     */
    @RequestMapping(value = "/progman/tenant/{tenantId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public Tenant findTenantById(@PathVariable final String tenantId) {
        return progManClient.getTenantById(tenantId);
    }

    /**
     * Passthrough endpoint which calls progman to retrieve list of tenant types
     *
     * @return List of TenantType objects.
     */
    @RequestMapping(value = "/progman/tenantTypes", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public List<TenantType> findTenantTypes() {
        return progManClient.getTenantTypes();
    }

}
