/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.service.impl;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.opentestsystem.authoring.testspecbank.service.FileManagerService;
import org.opentestsystem.authoring.testspecbank.service.FileTransferService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.integration.file.remote.session.Session;
import org.springframework.integration.sftp.session.DefaultSftpSessionFactory;

import com.jcraft.jsch.ChannelSftp.LsEntry;

public abstract class AbstractSftpFileTransferService implements FileTransferService {
    /** logger. */
    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractSftpFileTransferService.class);

    @Autowired
    private FileManagerService fileManagerService;

    protected abstract DefaultSftpSessionFactory getSftpSessionFactory();

    protected abstract String getHumanReadableConnectionInfo(String fileName);

    protected abstract String getFullPath(String fileName);

    @Override
    public void downloadFile(final String fileName, final String targetDirectory) {
        Session<LsEntry> sftpSession = null;
        try {
            sftpSession = getSftpSessionFactory().getSession();

            // for each file...
            final String humanReadableConnectionInfo = getHumanReadableConnectionInfo(fileName);
            LOGGER.debug("attempting to read file: " + humanReadableConnectionInfo);

            File outputFile = null;
            FileOutputStream fileOutputStream = null;
            try {
                // create local download file and read from SFTP site
                outputFile = fileManagerService.initializeFile(targetDirectory, fileName);
                fileOutputStream = new FileOutputStream(outputFile);
                sftpSession.read(fileName, fileOutputStream);
            } catch (final IOException e) {
                LOGGER.error("unable to read file: " + humanReadableConnectionInfo);
                throw new LocalizedException("sftp.read.error", new String[] { fileName }, e);
            } finally {
                if (fileOutputStream != null) {
                    fileOutputStream.close();
                }
            }
        } catch (final IOException e) {
            LOGGER.error("unable to create sessions", e);
            throw new LocalizedException("sftp.session.error", e);
        } finally {
            if (sftpSession != null && sftpSession.isOpen()) {
                sftpSession.close();
            }
        }
    }

    @Override
    public final void writeFile(final String localFileName, final String remoteDirectory, final String remoteFileName) {
        final String destinationDirectory = getFullPath(remoteDirectory);
        final String destinationPath = getFullPath(remoteDirectory + "/" + remoteFileName);
        final String humanReadableConnectionInfo = getHumanReadableConnectionInfo(remoteDirectory + "/" + remoteFileName);
        LOGGER.debug("attempting to transfer file: " + humanReadableConnectionInfo);

        FileInputStream fis = null;
        BufferedInputStream bis = null;
        Session<LsEntry> sftpSession = null;
        try {
            // create SFTP session
            sftpSession = getSftpSessionFactory().getSession();

            // create parent folder if necessary
            if (!sftpSession.exists(destinationDirectory)) {
                sftpSession.mkdir(destinationDirectory);
            }

            // create input stream for local file
            fis = new FileInputStream(fileManagerService.getFullPath(localFileName));
            bis = new BufferedInputStream(fis);

            // write input stream to remote location
            sftpSession.write(bis, destinationPath);
        } catch (final IOException e) {
            LOGGER.error("unable to transfer file: " + humanReadableConnectionInfo);
            throw new LocalizedException("sftp.write.error", new String[] { localFileName }, e);
        } finally {
            try {
                if (bis != null) {
                    bis.close();
                }
                if (fis != null) {
                    fis.close();
                }
                if (sftpSession != null && sftpSession.isOpen()) {
                    sftpSession.close();
                }
            } catch (final IOException e) {
                LOGGER.error("unable to transfer file: " + humanReadableConnectionInfo);
                throw new LocalizedException("sftp.write.error", new String[] { localFileName }, e);
            }
        }
    }
}
