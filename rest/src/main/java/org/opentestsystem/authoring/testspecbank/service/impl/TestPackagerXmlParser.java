/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.service.impl;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.opentestsystem.shared.exception.LocalizedException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public final class TestPackagerXmlParser {
    private static final Logger LOGGER = LoggerFactory.getLogger(TestPackagerXmlParser.class);

    /**
     * Parse out a NodeList from the given xml using the given XPath expression.
     * 
     * @param expression - the XPath expression to parse the XML with
     * @param xmlToParse - byte array containing the xml to parse
     * @return NodeList - the parsing result
     */
    public static NodeList parseNodeList(final String expression, final byte[] xmlToParse) {

        ByteArrayInputStream inputStream = null;
        NodeList nodeList = null;
        try {
            final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            final XPath xPath = XPathFactory.newInstance().newXPath();

            inputStream = new ByteArrayInputStream(xmlToParse);
            final Document xmlDocument = builder.parse(inputStream);

            nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);
        } catch (final ParserConfigurationException | SAXException | IOException | XPathExpressionException e) {
            LOGGER.error("XPath parsing error", e);
            throw new LocalizedException("tsb.xml.parse");
        } finally {
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (final IOException e) {
                LOGGER.error("XPath parsing error", e);
                throw new LocalizedException("tsb.xml.parse");
            }
        }

        return nodeList;
    }

}
