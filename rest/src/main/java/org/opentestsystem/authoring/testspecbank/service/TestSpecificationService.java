/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.service;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Optional;

import org.opentestsystem.authoring.testspecbank.domain.ExportPackageStatus;
import org.opentestsystem.authoring.testspecbank.domain.TestSpecification;
import org.opentestsystem.shared.search.domain.SearchResponse;

import tds.common.ValidationError;

public interface TestSpecificationService {

    TestSpecification saveTestSpecification(TestSpecification testSpecification);

    TestSpecification updateTenantSet(String testSpecificationId, Set<String> tenantSet);

    TestSpecification getTestSpecification(String testSpecificationId, boolean excludeXml);

    SearchResponse<TestSpecification> searchTestSpecifications(Map<String, String[]> parameterMap, boolean includeXml);

    TestSpecification retireTestSpecification(String testSpecificationId, boolean undoRetirement);

    boolean isAdminUser();

    // =================================================================================
    // ~ Test Packaging Functionality ==================================================
    // =================================================================================

    /**
     * Creates an initial export package for the given test specification.
     * 
     * @param testSpecificationId - the spec to generate an export package for
     * @return the updated test specification
     */
    TestSpecification requestExportPackage(String testSpecificationId);

    /**
     * Retries the export package for the given test specification.
     * 
     * @param testSpecificationId - the spec to re-package
     * @return the updated test specification
     */
    TestSpecification retryExportPackage(String testSpecificationId);

    /**
     * Gets test specifications which have an export status currently in a status which exists in the specified set.
     * 
     * @param statuses the export statuses to search for
     * @param includeXml whether to include the full spec xml or not
     * @return List of test specifications which have an export package status in the specified set
     */
    List<TestSpecification> getTestSpecificationsByExportPackageStatusIn(Set<ExportPackageStatus> statuses, boolean includeXml);

    /**
     * Checks whether items need to be exported and updates spec to the correct status.
     * 
     * @param testSpecification to load test specification details for
     */
    void loadTestSpecification(TestSpecification testSpecification);

    /**
     * Checks whether the items on the specification have been successfully exported from TIB, and updates
     * the export package of the spec to the correct status.
     * 
     * @param testSpecification to check item statuses for
     */
    void checkTibExportStatus(TestSpecification testSpecification);

    /**
     * Creates export package zip file on local file system
     * 
     * @param testSpecification to build package for
     */
    void buildExportPackageZip(TestSpecification testSpecification);

    /**
     * Transfers export package for the given specification to configured location
     * 
     * @param testSpecification to transfer export package for
     */
    void transferExportPackage(TestSpecification testSpecification);

    /**
     * Delete a {@link TestSpecification} from the Test Specification Bank.
     *
     * @param testSpecificationName The name of the specification to delete.
     * @return a {@link tds.common.ValidationError} if an error is encountered attempting to delete the test
     * specification, otherwise {@code Optional.empty()}.
     */
    Optional<ValidationError> deleteTestSpecification(final String testSpecificationName);
}
