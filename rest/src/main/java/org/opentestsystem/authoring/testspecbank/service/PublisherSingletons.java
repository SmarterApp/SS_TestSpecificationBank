/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testspecbank.service;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;

import org.opentestsystem.shared.exception.LocalizedException;
import org.springframework.beans.factory.xml.ResourceEntityResolver;
import org.springframework.core.io.DefaultResourceLoader;

public final class PublisherSingletons {
    private final String dtdUrl;
    private DocumentBuilder DOCUMENT_BUILDER;
    private Transformer DOCUMENT_TRANSFORMER;
    private static final String ERROR_MESSAGE_KEY = "testspec.spec.xml.config";

    public static PublisherSingletons getInstance(final String dtdUrl) {
        return new PublisherSingletons(dtdUrl);
    }

    private PublisherSingletons(final String dtdUrl) {
        this.dtdUrl = dtdUrl;

        try {
            // XML bytes to be parsed as document source
            this.DOCUMENT_BUILDER = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            final ResourceEntityResolver resolver = new ResourceEntityResolver(new DefaultResourceLoader());
            this.DOCUMENT_BUILDER.setEntityResolver(resolver);
        } catch (final ParserConfigurationException e) {
            throw new LocalizedException(ERROR_MESSAGE_KEY, new String[] { e.getMessage() }, e);
        }
        try {
            // ResourceEntityResolver will attempt to find DTD either in externally hosted location or on the classpath
            this.DOCUMENT_TRANSFORMER = TransformerFactory.newInstance().newTransformer();
            // DOCTYPE/path to DTD to be added to XML document during transformation
            this.DOCUMENT_TRANSFORMER.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, this.dtdUrl);
        } catch (final TransformerConfigurationException | TransformerFactoryConfigurationError e) {
            throw new LocalizedException(ERROR_MESSAGE_KEY, new String[] { e.getMessage() }, e);
        }
    }

    public DocumentBuilder getDOCUMENT_BUILDER() {
        if (this.DOCUMENT_BUILDER == null) {
            throw new LocalizedException(ERROR_MESSAGE_KEY, new String[] { "document builder initialization failed" });
        }
        return this.DOCUMENT_BUILDER;
    }

    public Transformer getDOCUMENT_TRANSFORMER() {
        if (this.DOCUMENT_TRANSFORMER == null) {
            throw new LocalizedException(ERROR_MESSAGE_KEY, new String[] { "document transformer initialization failed" });
        }
        return this.DOCUMENT_TRANSFORMER;
    }
}
